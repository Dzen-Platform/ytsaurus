#!/usr/bin/env python

from __future__ import print_function
import sys

import yt.yson as yson

from yt.wrapper.native_driver import get_driver_instance
from yt.wrapper.common import update, get_value
import yt.wrapper as yt

from argparse import ArgumentParser, Action

class ParseStructuredArgument(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        # Multiple times specified arguments are merged into single dict.
        old_value = get_value(getattr(namespace, self.dest), {})
        new_value = update(old_value, yson.loads(values))
        setattr(namespace, self.dest, new_value)

def build_snapshot(*args, **kwargs):
    print(get_driver_instance(None).build_snapshot(*args, **kwargs))

def gc_collect(*args, **kwargs):
    get_driver_instance(None).gc_collect(*args, **kwargs)

def kill_process(*args, **kwargs):
    print('NB: If process was actually killed, there should be a "Socket was closed" below\n', file=sys.stderr)
    get_driver_instance(None).kill_process(*args, **kwargs)

def write_core_dump(*args, **kwargs):
    print(get_driver_instance(None).write_core_dump(*args, **kwargs))

def write_operation_controller_core_dump(*args, **kwargs):
    print(get_driver_instance(None).write_operation_controller_core_dump(*args, **kwargs))

def clear_metadata_caches(*args, **kwargs):
    get_driver_instance(None).clear_metadata_caches(*args, **kwargs)

def main():
    config_parser = ArgumentParser(add_help=False)
    config_parser.add_argument("--config", action=ParseStructuredArgument, help="specify configuration",
                               default={})

    parser = ArgumentParser(
        parents=[config_parser],
        description="Script to run some administer stuff directly through driver")

    subparsers = parser.add_subparsers(metavar="command")
    subparsers.required = True

    build_snapshot_parser = subparsers.add_parser("build-snapshot", help="Build snapshot")
    build_snapshot_parser.set_defaults(func=build_snapshot)
    build_snapshot_parser.add_argument("--set-read-only", action="store_true", default=False)
    build_snapshot_parser.add_argument("--cell-id", required=True)

    gc_collect_parser = subparsers.add_parser("gc-collect", help="Run garbage collection")
    gc_collect_parser.set_defaults(func=gc_collect)

    kill_process_parser = subparsers.add_parser("kill-process", help="Force remote YT process (node, scheduler or master) " +
                                                                     "listening to a given address exit immediately, use with care. " +
                                                                     "This command always finishes with an error")
    kill_process_parser.add_argument("address")
    kill_process_parser.set_defaults(func=kill_process)

    write_core_dump_parser = subparsers.add_parser("write-core-dump", help="Make remote YT process (node, scheduler or master) write a run-time" +
                                                                           "core dump. This (presumably) does not affect the state of the process.")
    write_core_dump_parser.add_argument("address")
    write_core_dump_parser.set_defaults(func=write_core_dump)

    write_operation_controller_core_dump_parser = subparsers.add_parser("write-operation-controller-core-dump",
                                                                        help="Make operation controller write a run-time core dump." +
                                                                             "This (presumably) does not affect the state of the process.")
    write_operation_controller_core_dump_parser.add_argument("operation_id")
    write_operation_controller_core_dump_parser.set_defaults(func=write_operation_controller_core_dump)

    clear_metadata_caches_parser = subparsers.add_parser("clear-caches", help="Clear metadata caches")
    clear_metadata_caches_parser.set_defaults(func=clear_metadata_caches)

    config_args, unparsed = config_parser.parse_known_args()
    yt.config.update_config(config_args.config)

    args = parser.parse_args(unparsed)
    func_args = dict(vars(args))
    func_args.pop("func")
    args.func(**func_args)

if __name__ == "__main__":
    main()
