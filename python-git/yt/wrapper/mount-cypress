#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""mount-cypress -- mount a Cypress, an YT cluster metainformation tree.

Usage:
  mount-cypress <proxy> <mountpoint>
  mount-cypress (-h | --help)

Arguments:
  <proxy>       Proxy alias like "aristotle.yt.yandex.net" or just "aristotle".
  <mountpoint>  Mountpoint directory like "/mnt/aristotle".

Options:
  -h, --help    Show this help. 

"""
import stat
import errno
import time
import logging
import functools
import sys

import docopt
import expiringdict
import fuse
import yt.wrapper.client


logging.basicConfig(
    format="%(name)s\t%(asctime)s.%(msecs)03d\t%(message)s",
    datefmt="%H:%M:%S"
)


def log_calls(logger, message_format):
    """Create a decorator for logging each wrapped function call.

    message_format:
      An old-style format string.
      Items with names corresponding to function's arguments are allowed.
      A special key "__name__" corresponds to the wrapped function's name.
    """
    def get_logged_version(function):
        positional_names = function.__code__.co_varnames

        def log_call(*args, **kwargs):
            kwargs.update(zip(positional_names, args))
            kwargs["__name__"] = function.__name__
            logger.debug(message_format, kwargs)

        @functools.wraps(function)
        def logged_function(*args, **kwargs):
            log_call(*args, **kwargs)
            return function(*args, **kwargs) 

        return logged_function

    return get_logged_version


def handle_yt_errors(function):
    """Modify the function so it raises FuseOSError instead of YtError."""
    @functools.wraps(function)
    def cautious_function(*args, **kwargs):
        try:
            return function(*args, **kwargs)
        except yt.wrapper.YtError:
            raise fuse.FuseOSError(errno.ENOENT)

    return cautious_function


class CachedYtClient(yt.wrapper.client.Yt):
    """An YT client which caches nodes and their attributes for some time."""

    _logger = logging.getLogger(__name__ + ".CachedYtClient")
    _logger.setLevel(level=logging.DEBUG)

    def __init__(self, *args, **kwargs):
        """Initialize the client.

        max_len:
          Maximum number of cached nodes; the default is 16384.
        max_age_seconds:
            After this period the node is removed from cache;
            the default value is 2 seconds.
        The rest of the arguments are passed to the parent constructor.
        """
        max_len = kwargs.pop("max_len", 16384)
        max_age_seconds = kwargs.pop("max_age_seconds", 2)
        super(CachedYtClient, self).__init__(*args, **kwargs)

        self._attribute_cache = expiringdict.ExpiringDict(
            max_len=max_len,
            max_age_seconds=max_age_seconds
        )
        self._node_cache = expiringdict.ExpiringDict(
            max_len=max_len,
            max_age_seconds=max_age_seconds
        )

    @log_calls(_logger, "%(__name__)s(%(path)r)")
    def get_attributes(self, path, attributes=[]):
        """Get a subset of node's attributes."""
        try:
            flag, value = self._node_cache[path]
        except KeyError:
            pass
        else:
            if not flag:
                self._logger.debug("\thit, not exists")
                raise value

        node_attributes = {}
        for attribute in attributes:
            try:
                flag, value = self._attribute_cache[(path, attribute)]
            except KeyError:
                break
            if flag:
                node_attributes[attribute] = value
        else:
            self._logger.debug("\thit, exists")
            return node_attributes

        try:
            real_node_attributes = super(CachedYtClient, self).get(path + "/@")
        except yt.wrapper.YtError as error:
            self._node_cache[path] = (False, error)
            self._logger.debug("\tmiss, not exists")
            raise
        self._logger.debug("\tmiss, exists")

        self._attribute_cache.update(
            ((path, attribute), (True, value))
            for attribute, value in real_node_attributes.iteritems()
        )
        for attribute in attributes:
            if attribute in real_node_attributes:
                node_attributes[attribute] = real_node_attributes[attribute]
            else:
                self._attribute_cache[(path, attribute)] = (
                    False,
                    yt.wrapper.YtError("No such attribute: " + attribute)
                )

        return node_attributes

    @log_calls(_logger, "%(__name__)s(%(path)r, %(attribute)r)")
    def get_attribute(self, path, attribute):
        """Get a node's attribute."""
        attributes = self.get_attributes(path, [attribute])
        try:
            return attributes[attribute]
        except KeyError:
            raise yt.wrapper.YtError("Node {} doesn't exist".format(path))

    @log_calls(_logger, "%(__name__)s(%(path)r)")
    def list(self, path, attributes=[]):
        """Get children of a node specified by a ypath."""
        try:
            flag, value = self._node_cache[path]
        except KeyError:
            pass
        else:
            if flag:
                return value
            raise value

        children = super(CachedYtClient, self).list(
            path, attributes=attributes
        )
        self._node_cache[path] = (True, children)

        for attribute in attributes:
            for child_node in children:
                child_path = path + "/" + child_node
                try:
                    cache_value = (True, child_node.attributes[attribute])
                except KeyError:
                    cache_value = (False, None)
                self._attribute_cache[(child_path, attribute)] = cache_value

        return children


class TableSlice:
    def __init__(self):
        self.lower_offset = self.upper_offset = 0
        self.lower_row = self.upper_row = 0
        self.slices = []


class Block:
    def __init__(self):
        self.offset = 0
        self.length = 0
        self.content = ""


class Cypress(fuse.Operations):
    """An implementation of FUSE operations on a Cypress tree."""

    _logger = logging.getLogger(__name__ + ".Cypress")
    _logger.setLevel(level=logging.DEBUG)

    _system_attributes = [
        "type",
        "ref_counter",
        "access_time",
        "modification_time",
        "creation_time",
        "uncompressed_data_size"
    ]

    def __init__(self, client, config = {}):
        super(fuse.Operations, self).__init__()

        self._client = client

        self._next_fh = 0
        self._file_table = {}

        self._slice_cache = expiringdict.ExpiringDict(
            max_len=100,
            max_age_seconds=10 * 60,
        )
        self._block_cache = expiringdict.ExpiringDict(
            max_len=100,
            max_age_seconds=10 * 60,
        )

        self._read_buffer_size = config.get("read_buffer_size", 4 * 1024 * 1024)
        self._slice_row_count = config.get("slice_row_count", 10000)

    @staticmethod
    def _to_ypath(path):
        """Convert an absolute file path to YPath."""
        if path == u"/":
            return u"/"
        return u"/" + path

    @staticmethod
    def _to_timestamp(timestring):
        """Convert a time string in YT format to UNIX timestamp."""
        parsed_time = time.strptime(timestring, "%Y-%m-%dT%H:%M:%S.%fZ")
        return time.mktime(parsed_time)

    def _get_st_mode(self, attributes):
        """Get st_mode for a node based on its attributes."""
        node_type = attributes["type"]
        if node_type == "file":
            mask = stat.S_IFREG | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
        elif node_type == "table":
            mask =  stat.S_IFREG | stat.S_IRUSR | stat.S_IRGRP | stat.S_IROTH
        elif node_type == "map_node":
            mask = stat.S_IFDIR | stat.S_IXUSR | stat.S_IXGRP | stat.S_IXOTH
        else:
            # Support links maybe?
            mask = stat.S_IFBLK
        return mask | stat.S_IRUSR

    def _get_st_size(self, attributes):
        """Get st_size for a node based on its attributes."""
        node_type = attributes["type"]
        if node_type == "file":
            return attributes["uncompressed_data_size"]
        return 0

    def _get_stat(self, attributes):
        """Get stat sturcture for a node based on its attributes."""
        return {
            "st_dev": 0,
            "st_ino": 0,
            "st_mode": self._get_st_mode(attributes),
            "st_nlink": attributes["ref_counter"],
            "st_uid": -1,
            "st_gid": -1,
            "st_atime": Cypress._to_timestamp(attributes["access_time"]),
            "st_mtime": Cypress._to_timestamp(attributes["modification_time"]),
            "st_ctime": Cypress._to_timestamp(attributes["creation_time"]),
            "st_size": self._get_st_size(attributes)
        }

    def _get_xattr(self, attribute):
        """Convert Cypress attribute name to Linux attribute name."""
        return "user." + attribute

    def _get_attribute(self, xattr):
        """Convert Linux attribute name to Cypress attribute name."""
        if not xattr.startswith("user."):
            raise fuse.FuseOSError(errno.ENODATA)
        return ".".join(xattr.split(".")[1:])

    @handle_yt_errors
    @log_calls(_logger, "%(__name__)s(%(path)r)")
    def getattr(self, path, fi):
        ypath = self._to_ypath(path)
        attributes = self._client.get_attributes(
            ypath,
            self._system_attributes
        )
        return self._get_stat(attributes)

    @handle_yt_errors
    @log_calls(_logger, "%(__name__)s(%(path)r)")
    def readdir(self, path, fi):
        ypath = self._to_ypath(path)
        # Attributes are queried to speed up subsequent "getattr" queries
        # about the node's children (for example, in case of "ls" command).
        children = self._client.list(ypath, attributes=self._system_attributes)
        # Still having encoding problems,
        # try listing //statbox/home/zahaaar at Plato.
        return (child.decode("utf-8") for child in children)

    @handle_yt_errors
    @log_calls(_logger, "%(__name__)s(%(path)r)")
    def open(self, path, fi):
        ypath = self._to_ypath(path)

        type_ = self._client.get_attribute(ypath, "type")
        if type_ == "table":
            # Without this flag FUSE treats the file with st_size=0 as empty.
            fi.direct_io = True
        elif type_ != "file":
            raise fuse.FuseOSError(errno.EINVAL)

        # Non-atomic :(
        fi.fh = self._next_fh
        self._next_fh += 1

        self._file_table[fi.fh] = {"ypath": ypath, "type": type_}

        return 0

    @log_calls(_logger, "%(__name__)s()")
    def release(self, _, fi):
        del self._file_table[fi.fh]
        return 0

    def _read_file(self, ypath, length, offset, fh):
        try:
            block = self._block_cache[ypath]
        except KeyError:
            block = self._block_cache[ypath] = Block()

        if offset < block.offset or offset + length > block.offset + block.length:
            block.length = max(length, self._read_buffer_size)
            if offset < block.offset:
                block.offset = max(offset + length - block.length, 0)
            else:
                block.offset = offset
            block.content = self._client.read_file(ypath, length=block.length, offset=block.offset).read()

        assert block.offset <= offset
        assert block.offset + block.length >= offset + length

        offset -= block.offset
        result = block.content[offset:offset + length]

        return result

    def _read_table(self, ypath, length, offset, fi):
        if ypath not in self._slice_cache:
            self._slice_cache[ypath] = TableSlice()
        file_slice = self._slice_cache[ypath]

        while file_slice.upper_offset < offset + length:
            next_upper_row = file_slice.upper_row + self._slice_row_count
            slice_ypath = ypath + "[#{}:#{}]".format(file_slice.upper_row, next_upper_row)
            slice_content = "".join(list(self._client.read_table(slice_ypath, format=yt.wrapper.JsonFormat())))
            if len(slice_content) == 0:
                break
            file_slice.upper_offset += len(slice_content)
            file_slice.upper_row += self._slice_row_count
            file_slice.slices += [slice_content]

        while file_slice.lower_offset > offset:
            next_lower_row = file_slice.lower_row - self._slice_row_count
            slice_ypath = ypath + "[#{}:#{}]".format(next_lower_row, file_slice.lower_row)
            slice_content = "".join(list(self._client.read_table(slice_ypath, format=yt.wrapper.JsonFormat())))
            file_slice.lower_offset -= len(slice_content)
            file_slice.lower_row -= self._slice_row_count
            file_slice.slices = [slice_content] + file_slice.slices

        offset -= file_slice.lower_offset
        return "".join(file_slice.slices)[offset:offset + length]

    @handle_yt_errors
    @log_calls(
        _logger,
        "%(__name__)s(offset=%(offset)r, length=%(length)r)"
    )
    def read(self, _, length, offset, fi):
        _file_table_entry = self._file_table[fi.fh]
        ypath = _file_table_entry["ypath"]
        type_ = _file_table_entry["type"]

        if type_ == "file":
            return self._read_file(ypath, length, offset, fi)
        if type_ == "table":
            return self._read_table(ypath, length, offset, fi)

    @handle_yt_errors
    @log_calls(_logger, "%(__name__)s(%(path)r)")
    def listxattr(self, path):
        ypath = self._to_ypath(path)
        attributes = self._client.get(ypath + "/@")
        return (self._get_xattr(attribute) for attribute in attributes)

    @handle_yt_errors
    @log_calls(_logger, "%(__name__)s(%(path)r, name=%(name)r)")
    def getxattr(self, path, name, position=0):
        ypath = self._to_ypath(path)
        attribute = self._get_attribute(name)
        try:
            attr = self._client.get_attribute(ypath, attribute)
        except yt.wrapper.YtError:
            raise fuse.FuseOSError(errno.ENODATA)
        return repr(attr)


def mount_cypress(proxy, mountpoint):
    """Mount a Cypress."""
    cypress = Cypress(CachedYtClient(proxy=proxy))
    fuse.FUSE(cypress, mountpoint, foreground=True, raw_fi=True, nothreads=True)
    return 0


if __name__ == "__main__":
    arguments = docopt.docopt(__doc__)
    sys.exit(
        mount_cypress(arguments["<proxy>"], arguments["<mountpoint>"])
    )
