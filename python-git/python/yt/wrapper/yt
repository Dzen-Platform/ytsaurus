#!/usr/bin/env python

from argparse import ArgumentParser, Action

from yt.wrapper.common import die
import yt.wrapper as yt
import yt.yson as yson

import os
import sys
import traceback
import simplejson as json
import fnmatch
import shlex

def writelines_silently(lines):
    try:
        for line in lines:
            sys.stdout.write(line)
    except IOError:
        sys.exit(1)
    except:
        raise

class ParseFormat(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, yt.Format(values))

class ParseStructuredArgument(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, get_structure_parser("YT_ARGUMENTS_FORMAT")(values))

class ParseStructuredData(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        setattr(namespace, self.dest, get_structure_parser("YT_STRUCTURED_DATA_FORMAT")(values))

class ParseMemoryLimit(Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if values is not None:
            values = yt.config.MB * int(values)
        setattr(namespace, self.dest, values)

def get_structure_parser(env):
    option_format = os.environ.get(env, "yson")
    if option_format == "json":
        return json.loads
    elif option_format == "yson":
        return yson.loads
    else:
        raise yt.YtError("Incorrect structured format " + option_format)

def get_structure_writer(env):
    option_format = os.environ.get(env, "yson")
    if option_format == "json":
        return lambda data: json.dumps(yson.yson_to_json(data), indent=2)
    elif option_format == "yson":
        return lambda data: yson.dumps(data, yson_format="pretty", indent=2)
    else:
        raise yt.YtError("Incorrect structured format " + option_format)

def exists(args):
    print "true" if yt.exists(args.path) else "false"

def add_exists_parser(add_parser):
    parser = add_parser("exists", help="check path exists")
    parser.add_argument("path")
    parser.set_defaults(func=exists)

def formatted_print(obj, path, long_format):
    if long_format:
        attrs = yt.get(path + "/@")
        type = attrs["type"]
        user = attrs["account"]
        size = yt.get(path + "/@recursive_resource_usage/disk_space")
        date, time = yt.get(path + "/@modification_time").split("T")
        time = time[:5]
        sys.stdout.write("%10s %20s %18r %10s %5s " % (type, user, size, date, time))
    print obj

def list(args):
    if args.format is not None and args.long_format:
        raise yt.YtError("You can't specify --long-format and --structured simultaneously")

    list = yt.list(args.path, max_size=args.max_size, attributes=args.attribute, format=args.format)
    if args.format is None:
        if list.attributes.get("incomplete", "false") == "true":
            print >>sys.stderr, "List is incomplete!"
        if args.attribute is not None:
            print >>sys.stderr, "Attributes are ignored if format is not specified!"
        for elem in list:
            formatted_print(elem, args.path + "/" + elem, args.long_format)
    else:
        sys.stdout.write(list)

def add_list_parser(add_parser):
    parser = add_parser("list", help="list objects")
    parser.add_argument("path")
    parser.add_argument("-l", "--long-format", action="store_true", default=False)
    parser.add_argument("--format", action=ParseFormat)
    parser.add_argument("--attribute", action="append")
    parser.add_argument("--max-size", type=int, default=65535)
    parser.set_defaults(func=list)


def find(args):
    path_filter = None
    if args.name is not None:
        path_filter = lambda path: fnmatch.fnmatch(os.path.basename(path), args.name)

    fitler_args = ["account", "owner"]
    attributes = filter(lambda x: vars(args)[x] is not None, fitler_args)
    object_filter = lambda obj: \
        all([obj.attributes.get(attr) == vars(args)[attr] for attr in attributes])

    result = yt.search(args.path,
                    node_type=args.type,
                    path_filter=path_filter,
                    attributes=attributes,
                    object_filter=object_filter,
                    depth_bound=args.depth)

    for elem in result:
        formatted_print(elem, elem, args.long_format)

def add_find_parser(add_parser):
    parser = add_parser("find", help="search objects")
    parser.add_argument("path")
    parser.add_argument("--name", "-name")
    parser.add_argument("--type")
    parser.add_argument("--account")
    parser.add_argument("--owner")
    parser.add_argument("--depth", type=int)
    parser.add_argument("-l", "--long-format", action="store_true", default=False)
    parser.set_defaults(func=find)


def cat(args):
    type = yt.get(yt.to_name(args.path) + "/@type")
    if type == "file":
        writelines_silently(yt.download_file(args.path, response_type="iter_content"))
    elif type == "table":
        if args.format is None:
            die("You should specify --format for table")
        writelines_silently(yt.read_table(args.path, format=args.format, response_type="iter_content"))
    else:
        die("Incorrect node type " + type)

def add_cat_parser(add_parser):
    parser = add_parser("cat")
    parser.add_argument("path")
    parser.add_argument("--format", action=ParseFormat)
    parser.set_defaults(func=cat)

def read(args):
    writelines_silently(yt.read_table(args.path, format=args.format, table_reader=args.table_reader, response_type="iter_content"))

def add_read_parser(add_parser):
    parser = add_parser("read", help="read rows from table")
    parser.add_argument("path")
    parser.add_argument("--format", action=ParseFormat)
    parser.add_argument("--table-reader", action=ParseStructuredArgument)
    parser.set_defaults(func=read)

def download(args):
    writelines_silently(yt.download_file(args.path, response_type="iter_content", file_reader=args.file_reader, offset=args.offset, length=args.length))

def add_download_parser(add_parser):
    parser = add_parser("download", help="download file")
    parser.add_argument("path")
    parser.add_argument("--file-reader", action=ParseStructuredArgument)
    parser.add_argument("--offset", type=int)
    parser.add_argument("--length", type=int)
    parser.set_defaults(func=download)

def upload(args):
    yt.upload_file(sys.stdin, args.path, file_writer=args.file_writer)
    if args.executable:
        yt.set(args.path + "/@executable", "true")

def add_upload_parser(add_parser):
    parser = add_parser("upload", help="upload file")
    parser.add_argument("path")
    parser.add_argument("--file-writer", action=ParseStructuredArgument)
    parser.add_argument("--executable", action="store_true", default=False)
    parser.set_defaults(func=upload)

def write(args):
    yt.write_table(args.path, sys.stdin, format=args.format, table_writer=args.table_writer)

def add_write_parser(add_parser):
    parser = add_parser("write", help="write rows to table")
    parser.add_argument("path")
    parser.add_argument("--format", action=ParseFormat)
    parser.add_argument("--table-writer", action=ParseStructuredArgument)
    parser.set_defaults(func=write)

def create(args):
    print yt.create(args.type, args.path,
              ignore_existing=args.ignore_existing,
              recursive=args.recursive,
              attributes=args.attributes)

def add_create_parser(add_parser):
    parser = add_parser("create", help="create object")
    parser.add_argument("type")
    parser.add_argument("path", nargs="?", default=None)
    parser.add_argument("-r", "--recursive", action="store_true", default=False)
    parser.add_argument("-i", "--ignore-existing", action="store_true", default=False)
    parser.add_argument("--attributes", action=ParseStructuredArgument)
    parser.set_defaults(func=create)

def get(args):
    result = yt.get(args.path, spec=args.spec, attributes=args.attribute, format=args.format)
    if args.format is None:
        result = get_structure_writer("YT_STRUCTURED_DATA_FORMAT")(result)
    print result

def add_get_parser(add_parser):
    parser = add_parser("get", help="get subtree of object in the given path")
    parser.add_argument("path")
    parser.add_argument("--format", action=ParseFormat)
    parser.add_argument("--spec", action=ParseStructuredArgument)
    parser.add_argument("--attribute", action="append")
    parser.set_defaults(func=get)


def set(args):
    if args.value is None:
        args.value = sys.stdin.read()
    value = get_structure_parser("YT_STRUCTURED_DATA_FORMAT")(args.value)
    yt.set(args.path, value)

def add_set_parser(add_parser):
    parser = add_parser("set", help="set value at the given path")
    parser.add_argument("path")
    parser.add_argument("value", nargs="?")
    parser.set_defaults(func=set)

def remove(args):
    yt.remove(args.path, recursive=args.recursive, force=args.force)

def add_remove_parser(add_parser):
    parser = add_parser("remove", help="remove object")
    parser.add_argument("path")
    parser.add_argument("-r", "--recursive", action="store_true", default=False)
    parser.add_argument("-f", "--force", action="store_true", default=False)
    parser.set_defaults(func=remove)

def copy(args):
    yt.copy(args.src, args.dst)

def add_copy_parser(add_parser):
    parser = add_parser("copy", help="copy")
    parser.add_argument("src")
    parser.add_argument("dst")
    parser.set_defaults(func=copy)

def move(args):
    yt.move(args.src, args.dst)

def add_move_parser(add_parser):
    parser = add_parser("move", help="move")
    parser.add_argument("src")
    parser.add_argument("dst")
    parser.set_defaults(func=move)

def link(args):
    yt.link(args.target_path, args.link_path,
            ignore_existing=args.ignore_existing,
            recursive=args.recursive)

def add_link_parser(add_parser):
    parser = add_parser("link", help="create symbolic link")
    parser.add_argument("target_path")
    parser.add_argument("link_path")
    parser.add_argument("-r", "--recursive", action="store_true", default=False)
    parser.add_argument("-i", "--ignore-existing", action="store_true", default=False)
    parser.set_defaults(func=link)

def mount_table(args):
    yt.mount_table(args.path,
                   first_tablet_index=args.first_tablet_index,
                   last_tablet_index=args.last_tablet_index)

def add_mount_table_parser(add_parser):
    parser = add_parser("mount-table", help="mount table (or part of it)")
    parser.add_argument("path")
    parser.add_argument("--first-tablet-index", type=int)
    parser.add_argument("--last-tablet-index", type=int)
    parser.set_defaults(func=mount_table)

def unmount_table(args):
    yt.unmount_table(args.path,
                     first_tablet_index=args.first_tablet_index,
                     last_tablet_index=args.last_tablet_index,
                     force=args.force)

def add_unmount_table_parser(add_parser):
    parser = add_parser("unmount-table", help="unmount table (or part of it)")
    parser.add_argument("path")
    parser.add_argument("--first-tablet-index", type=int)
    parser.add_argument("--last-tablet-index", type=int)
    parser.add_argument("--force", action="store_true", default=False)
    parser.set_defaults(func=unmount_table)

def reshard_table(args):
    yt.reshard_table(args.path,
                     pivot_keys=args.pivot_keys,
                     first_tablet_index=args.first_tablet_index,
                     last_tablet_index=args.last_tablet_index)

def add_reshard_table_parser(add_parser):
    parser = add_parser("reshard-table", help="change pivot keys separating tablets of a given table")
    parser.add_argument("path")
    parser.add_argument("pivot_keys", action=ParseStructuredArgument, nargs="+")
    parser.add_argument("--first-tablet-index", type=int)
    parser.add_argument("--last-tablet-index", type=int)
    parser.set_defaults(func=reshard_table)

def select(args):
    writelines_silently(yt.select(args.query, args.timestamp, format=args.format, response_type="iter_content"))

def add_select_parser(add_parser):
    parser = add_parser("select", help="select records from table")
    parser.add_argument("query")
    parser.add_argument("--timestamp", type=int)
    parser.add_argument("--format", action=ParseFormat)
    parser.set_defaults(func=select)

#def upload(args):
#    if args.type == "file":
#        if args.format is not None:
#            die("Format should absent for files")
#        yt.upload_file(sys.stdin, args.path)
#        if args.executable:
#            yt.set(args.path + "/@executable", "true")
#    elif args.type == "table":
#        yt.write_table(args.path, sys.stdin, format=args.format)
#    else:
#        die("Incorrect type: " + args.type)
#
#def add_upload_parser(add_parser):
#    parser = add_parser("upload")
#    parser.add_argument("path")
#    parser.add_argument("--executable", action="store_true", default=False)
#    parser.add_argument("--format", action=ParseFormat)
#    parser.add_argument("--type")
#    parser.set_defaults(func=upload)

def erase(args):
    yt.run_erase(args.path)

def add_erase_parser(add_parser):
    parser = add_parser("erase", help="erase data from table")
    parser.add_argument("path")
    parser.set_defaults(func=erase)


def merge(args):
    yt.run_merge(args.src, args.dst, args.mode, spec=args.spec)

def add_merge_parser(add_parser):
    parser = add_parser("merge", help="merge given tables")
    parser.add_argument("--src", action="append", required=True)
    parser.add_argument("--dst", required=True)
    parser.add_argument("--mode", default="unordered")
    parser.add_argument("--spec", action=ParseStructuredArgument)
    parser.set_defaults(func=merge)


def sort(args):
    yt.run_sort(args.src, args.dst, args.sort_by, spec=args.spec)

def add_sort_parser(add_parser):
    parser = add_parser("sort", help="sort given tables")
    parser.add_argument("--src", nargs="+", required=True)
    parser.add_argument("--dst", required=True)
    parser.add_argument("--sort-by", action="append", required=True)
    parser.add_argument("--spec", action=ParseStructuredArgument)
    parser.set_defaults(func=sort)


def format_args(parser):
    parser.add_argument("--format", action=ParseFormat)
    parser.add_argument("--input-format", action=ParseFormat)
    parser.add_argument("--output-format", action=ParseFormat)

def operation_args(parser):
    parser.add_argument("command")
    parser.add_argument("--src", action="append", required=True)
    parser.add_argument("--dst", action="append", required=True)
    parser.add_argument("--file", action="append")
    parser.add_argument("--local-file", action="append")
    parser.add_argument("--job-count", type=int)
    parser.add_argument("--memory-limit", type=int, action=ParseMemoryLimit)
    parser.add_argument("--spec", action=ParseStructuredArgument)
    format_args(parser)

def map(args):
    yt.run_map(args.command, args.src, args.dst, file_paths=args.file, files=args.local_file,
               format=args.format, input_format=args.input_format, output_format=args.output_format,
               job_count=args.job_count, memory_limit=args.memory_limit, spec=args.spec)

def add_map_parser(add_parser):
    parser = add_parser("map", help="run map operation")
    operation_args(parser)
    parser.set_defaults(func=map)


def reduce(args):
    yt.run_reduce(args.command, args.src, args.dst, file_paths=args.file, files=args.local_file, reduce_by=args.reduce_by,
                  format=args.format, input_format=args.input_format, output_format=args.output_format, spec=args.spec)

def add_reduce_parser(add_parser):
    parser = add_parser("reduce", help="run reduce operation")
    operation_args(parser)
    parser.add_argument("--reduce-by", action="append")
    parser.set_defaults(func=reduce)

def remote_copy(args):
    yt.run_remote_copy(args.src, args.dst, args.cluster, network_name=args.network, spec=args.spec)

def add_remote_copy_parser(add_parser):
    parser = add_parser("remote-copy", help="run reduce operation")
    parser.add_argument("--src", action="append", required=True)
    parser.add_argument("--dst", required=True)
    parser.add_argument("--cluster", required=True)
    parser.add_argument("--network")
    parser.add_argument("--spec", action=ParseStructuredArgument)
    parser.set_defaults(func=remote_copy)

def map_reduce(args):
    yt.run_map_reduce(args.mapper, args.reducer, args.src, args.dst,
                      map_files=args.map_local_file, map_file_paths=args.map_file,
                      reduce_files=args.reduce_local_file, reduce_file_paths=args.reduce_file,
                      reduce_by=args.reduce_by, sort_by=args.sort_by,
                      format=args.format,
                      map_input_format=args.map_input_format, map_output_format=args.map_output_format,
                      reduce_input_format=args.reduce_input_format, reduce_output_format=args.reduce_output_format,
                      mapper_memory_limit=args.map_memory_limit,
                      reducer_memory_limit=args.reduce_memory_limit,
                      spec=args.spec)

def add_map_reduce_parser(add_parser):
    parser = add_parser("map-reduce", help="run map_reduce operation")
    parser.add_argument("--mapper", required=False)
    parser.add_argument("--reducer", required=True)
    parser.add_argument("--reduce-combiner", required=False)
    parser.add_argument("--src", action="append", required=True)
    parser.add_argument("--dst", action="append", required=True)
    parser.add_argument("--map-file", action="append")
    parser.add_argument("--map-local-file", action="append")
    parser.add_argument("--reduce-file", action="append")
    parser.add_argument("--reduce-local-file", action="append")
    parser.add_argument("--reduce-combiner-file", action="append")
    parser.add_argument("--reduce-combiner-local-file", action="append")
    parser.add_argument("--map-memory-limit", type=int, action=ParseMemoryLimit)
    parser.add_argument("--reduce-memory-limit", type=int, action=ParseMemoryLimit)
    parser.add_argument("--reduce-combiner-memory-limit", type=int, action=ParseMemoryLimit)
    parser.add_argument("--reduce-by", action="append", required=True)
    parser.add_argument("--sort-by", action="append")
    parser.add_argument("--spec", action=ParseStructuredArgument)
    parser.add_argument("--format", action=ParseFormat)
    parser.add_argument("--map-input-format", action=ParseFormat)
    parser.add_argument("--map-output-format", action=ParseFormat)
    parser.add_argument("--reduce-input-format", action=ParseFormat)
    parser.add_argument("--reduce-output-format", action=ParseFormat)
    parser.add_argument("--reduce-combiner-input-format", action=ParseFormat)
    parser.add_argument("--reduce-combiner-output-format", action=ParseFormat)
    parser.set_defaults(func=map_reduce)


def abort_op(args):
    yt.abort_operation(args.op)

def add_abort_op_parser(add_parser):
    parser = add_parser("abort-op", help="abort operation")
    parser.add_argument("op")
    parser.set_defaults(func=abort_op)

def suspend_op(args):
    yt.suspend_operation(args.op)

def add_suspend_op_parser(add_parser):
    parser = add_parser("suspend-op", help="suspend operation")
    parser.add_argument("op")
    parser.set_defaults(func=suspend_op)

def resume_op(args):
    yt.resume_operation(args.op)

def add_resume_op_parser(add_parser):
    parser = add_parser("resume-op", help="resume operation")
    parser.add_argument("op")
    parser.set_defaults(func=resume_op)

def track_op(args):
    yt.config.KEYBOARD_ABORT = False
    yt.WaitStrategy().process_operation("unknown", args.op)

def add_track_op_parser(add_parser):
    parser = add_parser("track-op", help="track operation")
    parser.add_argument("op")
    parser.set_defaults(func=track_op)

def start_tx(args):
    print yt.start_transaction(attributes=args.attributes, timeout=args.timeout)

def add_start_tx_parser(add_parser):
    parser = add_parser("start-tx", help="start transaction")
    parser.add_argument("--attributes", action=ParseStructuredArgument)
    parser.add_argument("--timeout", type=int)
    parser.set_defaults(func=start_tx)

def commit_tx(args):
    yt.commit_transaction(args.tx)

def add_commit_tx_parser(add_parser):
    parser = add_parser("commit-tx", help="commit transaction")
    parser.add_argument("tx")
    parser.set_defaults(func=commit_tx)

def abort_tx(args):
    yt.abort_transaction(args.tx)

def add_abort_tx_parser(add_parser):
    parser = add_parser("abort-tx", help="abort transaction")
    parser.add_argument("tx")
    parser.set_defaults(func=abort_tx)

def ping_tx(args):
    yt.ping_transaction(args.tx)

def add_ping_tx_parser(add_parser):
    parser = add_parser("ping-tx", help="ping transaction")
    parser.add_argument("tx")
    parser.set_defaults(func=ping_tx)

def lock(args):
    lock_id = yt.lock(args.path, mode=args.mode, waitable=args.waitable, wait_for=args.wait_for)
    if lock_id is not None:
        print lock_id

def add_lock_parser(add_parser):
    parser = add_parser("lock", help="lock cypress node")
    parser.add_argument("path")
    parser.add_argument("--mode")
    parser.add_argument("--waitable", action="store_true", default=False)
    parser.add_argument("--wait-for", type=int)
    parser.set_defaults(func=lock)

def check_permission(args):
    sys.stdout.write(yt.check_permission(args.user, args.permission, args.path, format=args.format))

def add_check_permission_parser(add_parser):
    parser = add_parser("check-permission", help="check permission of given user at given path")
    parser.add_argument("user")
    parser.add_argument("permission")
    parser.add_argument("path")
    parser.add_argument("--format", action=ParseFormat, default=yt.YsonFormat())
    parser.set_defaults(func=check_permission)

def add_permission(args):
    action = "deny" if args.deny else "allow"
    yt.set("{0}/@acl/end".format(args.path), {"action": action, "permissions": args.permission, "subjects": args.subject})

def add_add_permission_parser(add_parser):
    parser = add_parser("add-permission", help="add given permissions to given users")
    parser.add_argument("--subject", action="append", required=True)
    parser.add_argument("--permission", action="append", required=True)
    parser.add_argument("--path", required=True)
    parser.add_argument("--deny", action="store_true", default=False)
    parser.set_defaults(func=add_permission)

def add_member(args):
    yt.add_member(args.member, args.group)

def add_add_member_parser(add_parser):
    parser = add_parser("add-member", help="add member to group")
    parser.add_argument("member")
    parser.add_argument("group")
    parser.set_defaults(func=add_member)

def remove_member(args):
    yt.remove_member(args.member, args.group)

def add_remove_member_parser(add_parser):
    parser = add_parser("remove-member", help="remove member from group")
    parser.add_argument("member")
    parser.add_argument("group")
    parser.set_defaults(func=remove_member)

def execute(args):
    data = None
    if "input_format" in args.params:
        data = sys.stdin
    sys.stdout.write(yt.transaction_commands._make_transactional_request(args.command_name, args.params, data=data))

def add_execute_parser(add_parser):
    parser = add_parser("execute")
    parser.add_argument("command_name")
    parser.add_argument("params", action=ParseStructuredArgument)
    parser.set_defaults(func=execute)

def main():
    base_parser = ArgumentParser(add_help=False)
    base_parser.add_argument("--proxy")
    base_parser.add_argument("--prefix")
    base_parser.add_argument("--tx")
    base_parser.add_argument("--ping-ancestor-txs", action="store_true", default=False)
    base_parser.add_argument('--version', action='version', version="Version: YT wrapper " + yt.VERSION)

    parser = ArgumentParser(parents=[base_parser])
    subparsers = parser.add_subparsers()
    def add_parser(*args, **kwargs):
        return subparsers.add_parser(*args, parents=[base_parser], **kwargs)

    add_exists_parser(add_parser)
    add_list_parser(add_parser)
    add_find_parser(add_parser)
    add_create_parser(add_parser)
    add_read_parser(add_parser)
    add_write_parser(add_parser)
    add_upload_parser(add_parser)
    add_download_parser(add_parser)
    add_get_parser(add_parser)
    add_set_parser(add_parser)
    add_copy_parser(add_parser)
    add_move_parser(add_parser)
    add_link_parser(add_parser)
    add_remove_parser(add_parser)
    add_mount_table_parser(add_parser)
    add_unmount_table_parser(add_parser)
    add_reshard_table_parser(add_parser)
    add_select_parser(add_parser)
    add_erase_parser(add_parser)
    add_merge_parser(add_parser)
    add_sort_parser(add_parser)
    add_map_parser(add_parser)
    add_reduce_parser(add_parser)
    add_map_reduce_parser(add_parser)
    add_remote_copy_parser(add_parser)
    add_abort_op_parser(add_parser)
    add_suspend_op_parser(add_parser)
    add_resume_op_parser(add_parser)
    add_track_op_parser(add_parser)
    add_start_tx_parser(add_parser)
    add_abort_tx_parser(add_parser)
    add_commit_tx_parser(add_parser)
    add_ping_tx_parser(add_parser)
    add_lock_parser(add_parser)
    add_add_member_parser(add_parser)
    add_remove_member_parser(add_parser)
    add_check_permission_parser(add_parser)
    #add_add_permission_parser(add_parser)
    add_execute_parser(add_parser)
    #add_cat_parser(add_parser)

    aliases_filename = os.path.join(os.path.expanduser("~"), ".yt/aliases")
    if os.path.isfile(aliases_filename):
        aliases = {}
        for line in open(aliases_filename):
            line = line.strip()
            if not line or line.startswith("#"): continue
            name, flags = line.split("=")
            aliases[name] = shlex.split(flags)

        if len(sys.argv) > 1 and sys.argv[1] in aliases:
            sys.argv = sys.argv[0:1] + aliases[sys.argv[1]] + sys.argv[2:]

    args = parser.parse_args()
    if args.tx is not None:
        yt.config.TRANSACTION = args.tx
        yt.config.PING_ANCESTOR_TRANSACTIONS = args.ping_ancestor_txs
    if args.proxy is not None:
        yt.config.set_proxy(args.proxy)
    if args.prefix is not None:
        yt.config.PREFIX = args.prefix

    args.func(args)

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        die("Shutdown requested... exiting")
    except yt.YtError as error:
        die(str(error))
    except Exception:
        traceback.print_exc(file=sys.stderr)
        die()
