on:
  workflow_call:
    inputs:
      runs-on-value:
        required: true
        type: string
      publish-strawberry:
        required: true
        type: boolean
      publish-ytsaurus:
        required: true
        type: boolean
      publish-query-tracker:
        required: true
        type: boolean
      publish-chyt:
        required: true
        type: boolean
      publish-local:
        required: true
        type: boolean
      image-tag:
        required: true
        type: string

jobs:
  docker:
    runs-on: ${{ inputs.runs-on-value }}
    steps:
      - name: DockerHub login
        shell: bash
        run: |
          echo '${{ secrets.DOCKER_HUB_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

      - name: Core image
        run: |
          mkdir -p ../docker-ytsaurus-build
          IMAGE_TAG=${{ inputs.image-tag }}

          bash ./ytsaurus/yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-ytsaurus-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/ytsaurus:${IMAGE_TAG}
          docker tag ytsaurus/ytsaurus:${IMAGE_TAG} ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}
          docker push ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}

      - name: Query tracker image
        run: |
          mkdir -p ../docker-query-tracker-build
          IMAGE_TAG=${{ inputs.image-tag }}

          bash ./ytsaurus/yt/docker/query-tracker/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --qt-build-path ../build_qt --output-path ../docker-query-tracker-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/query-tracker:${IMAGE_TAG}
          docker tag ytsaurus/query-tracker:${IMAGE_TAG} ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}
          docker push ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}

      - name: CHYT image
        run: |
          mkdir -p ../docker-chyt-build
          IMAGE_TAG=${{ inputs.image-tag }}

          bash ./ytsaurus/yt/docker/chyt/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --chyt-build-path ../build/yt/chyt --output-path ../docker-chyt-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/chyt:${IMAGE_TAG}

      - name: Local image
        run: |
          mkdir -p ../docker-local-build
          IMAGE_TAG=${{ inputs.image-tag }}

          bash ./ytsaurus/yt/docker/local/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-local-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/local:${IMAGE_TAG}

      - name: Core image (relwithdebinfo)
        run: |
          IMAGE_TAG=${{ inputs.image-tag }}-relwithdebinfo

          mv ../build_debug/yt/yt/server/all/ytserver-all ../build/yt/yt/server/all/ytserver-all

          bash ./ytsaurus/yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-ytsaurus-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/ytsaurus:${IMAGE_TAG}
          docker tag ytsaurus/ytsaurus:${IMAGE_TAG} ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}
          docker push ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}

      - name: Query tracker image (relwithdebinfo)
        run: |
          IMAGE_TAG=${{ inputs.image-tag }}-relwithdebinfo

          mv ../build_qt_debug/ydb/library/yql/tools/mrjob/mrjob ../build_qt/ydb/library/yql/tools/mrjob/mrjob
          mv ../build_debug/yt/yt/server/all/ytserver-all ../build/yt/yt/server/all/ytserver-all || true

          bash ./ytsaurus/yt/docker/query-tracker/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --qt-build-path ../build_qt --output-path ../docker-query-tracker-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/query-tracker:${IMAGE_TAG}
          docker tag ytsaurus/query-tracker:${IMAGE_TAG} ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}
          docker push ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}

      - name: Chyt image (relwithdebinfo)
        run: |
          IMAGE_TAG=${{ inputs.image-tag }}-relwithdebinfo

          mv ../build_debug/yt/chyt/server/bin/ytserver-clickhouse ../build/yt/chyt/server/bin/ytserver-clickhouse

          bash ./ytsaurus/yt/docker/chyt/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --chyt-build-path ../build/yt/chyt --output-path ../docker-chyt-build --image-tag ${IMAGE_TAG}

          docker push ytsaurus/chyt:${IMAGE_TAG}

      - name: Local image (relwithdebinfo)
        run: |
          IMAGE_TAG=${{ inputs.image-tag }}-relwithdebinfo

          mv ../build_debug/yt/yt/server/all/ytserver-all ../build/yt/yt/server/all/ytserver-all || true

          bash ./ytsaurus/yt/docker/local/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-local-build --image-tag ${IMAGE_TAG_DEBUG}

          docker push ytsaurus/local:${IMAGE_TAG}


          if [[ $IMAGE_TAG == 'dev' ]];
          then
                      fi



      - name: Prepare python virtual environment
        run: |
          python3.11 -m venv ../venv

      - name: Build strawberry controller
        if: ${{ inputs.build-strawberry }}
        run: |
          cd ../ytsaurus/ytsaurus/yt/chyt/controller/cmd/chyt-controller
          export HOME=${RUNNER_WORKSPACE}
          /opt/go/bin/go build

      - name: Configure ytsaurus
        if: ${{ inputs.build-ytsaurus }}
        run: |
          mkdir -p ../build
          cd ../build
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ../ytsaurus/ytsaurus

      - name: Configure ytsaurus (relwithdebinfo)
        if: ${{ inputs.build-ytsaurus }}
        run: |
          mkdir -p ../build_relwithdebinfo
          cd ../build_relwithdebinfo
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ytsaurus/clang.toolchain \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            ../ytsaurus/ytsaurus

      - name: Configure query tracker
        if: ${{ inputs.build-query-tracker }}
        run: |
          #TODO: install it inside vm image.
          sudo apt-get -y install antlr3 libaio1 libaio-dev

          #TODO: remove -DMKQL_DISABLE_CODEGEN after YT-19852.
          mkdir -p ../build_qt
          cd ../build_qt
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ydb/clang.toolchain \
            -DCMAKE_C_FLAGS_RELEASE="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS_RELEASE="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_C_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=On \
            ../ytsaurus/ydb

      - name: Configure query tracker (relwithdebinfo)
        if: ${{ inputs.build-query-tracker }}
        run: |
          mkdir -p ../build_qt_relwithdebinfo
          cd ../build_qt_relwithdebinfo
          rm -rf *
          cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/bin/ccache \
            -DCMAKE_TOOLCHAIN_FILE=../ytsaurus/ydb/clang.toolchain \
            -DCMAKE_C_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_C_FLAGS_RELWITHDEBINFO="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_CXX_FLAGS_RELWITHDEBINFO="-O2 -UNDEBUG -DMKQL_DISABLE_CODEGEN" \
            -DCMAKE_POSITION_INDEPENDENT_CODE=On \
            ../ytsaurus/ydb

      - name: Build ytsaurus
        if: ${{ inputs.build-ytsaurus }}
        run: |
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"

          cd ../build
          ninja

          cd ../build_relwithdebinfo
          ninja ytserver-all

          #TODO
          cd ../build_relwithdebinfo
          ninja ytserver-clickhouse

      - name: Build query tracker
        if: ${{ inputs.build-query-tracker }}
        run: |
          export CCACHE_BASEDIR="$(realpath ..)"
          export CCACHE_REMOTE_ONLY=true
          export CCACHE_REMOTE_STORAGE="${{ vars.CCACHE_REMOTE_STORAGE }}"

          cd ../build_qt
          ninja libyqlplugin.so
          ninja libdatetime2_udf.so
          ninja libhyperloglog_udf.so
          ninja libjson_udf.so
          ninja libset_udf.so
          ninja libtop_udf.so
          ninja libyson2_udf.so
          ninja libdigest_udf.so
          ninja libhyperscan_udf.so
          ninja libmath_udf.so
          ninja libstat_udf.so
          ninja libtopfreq_udf.so
          ninja libdsv_udf.so
          ninja libip_udf.so
          ninja libpire_udf.so
          ninja libunicode_udf.so
          ninja libhistogram_udf.so
          ninja libjson2_udf.so
          ninja libre2_udf.so
          ninja libstring_udf.so
          ninja liburl_udf.so
          ninja mrjob

          cd ../build_qt_relwithdebinfo
          ninja mrjob

      - name: Build Python packages
        if: ${{ inputs.build-python }}
        run: |
          source ../venv/bin/activate
          YTSAURUS_COMMIT_HASH=${GITHUB_SHA} bash ./ytsaurus/yt/python/packages/build_ytsaurus_packages.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build


