name: C++ CI

on:
  push:
    branches:
      - main
      - test/workflows
      - stable/[0-9]+\.[0-9]+

jobs:
  start-vm:
    name: Start VM
    runs-on: trampoline
    outputs:
      label: ${{ steps.start-yc-runner.outputs.label }}
      instance-id: ${{ steps.start-yc-runner.outputs.instance-id }}
    steps:
      - name: Start YC runner
        id: start-yc-runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: start
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          folder-id: ${{ vars.YC_FOLDER_ID }}
          image-id: ${{ vars.YC_DEFAULT_IMAGE_ID }}
          zone-id: ${{ vars.YC_ZONE_ID }}
          subnet-id: ${{ vars.YC_SUBNET_ID }}
          cores: 16
          memory: 32GB
          core-fraction: 100
          disk-type: network-ssd-nonreplicated
          disk-size: 279GB

  checkout:
    name: Checkout sources
    needs: start-vm
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: Checkout ytsaurus
        uses: actions/checkout@v3
        with:
          path: ytsaurus

      - name: Checkout ydb
        uses: actions/checkout@v3
        with:
          repository: ydb-platform/ydb
          ref: cc871496ef02852bf6ca96470fa61c253940ddf4
          path: ydb

  build:
    name: Build
    needs:
      - start-vm
      - checkout
    uses: ./.github/workflows/build.yaml
    with:
      run-on-value: ${{ needs.start-vm.outputs.label }}
      build-strawberry: true
      build-ytsaurus: true
      build-query-tracker: true
      build-python: true

  check:
    name: Run checks
    needs:
      - start-vm
      - checkout
    runs-on: ${{ needs.start-vm.outputs.label }}
    steps:
      - name: DockerHub login
        shell: bash
        run: |
          echo '${{ secrets.DOCKER_HUB_PASSWORD }}' | docker login --username ${{ secrets.DOCKER_HUB_LOGIN }} --password-stdin

      - name: Download benchmarks
        uses: robinraju/release-downloader@v1.8
        with:
          latest: true
          fileName: "benchmark-0.0.1.tgz"

      - name: Build and push ytsaurus docker images
        shell: bash
        run: |
          mkdir -p ../docker-ytsaurus-build
          mkdir -p ../docker-local-build
          mkdir -p ../docker-query-tracker-build
          mkdir -p ../docker-chyt-build

          if [[ $GITHUB_REF =~ main$ ]];
          then
            IMAGE_TAG=dev
          elif [[ $GITHUB_REF =~ releases ]];
          then
            IMAGE_TAG=dev-${GITHUB_REF#refs/*/stable/}
          else
            IMAGE_TAG=nopush
          fi
          IMAGE_TAG_DEBUG=${IMAGE_TAG}-debug

          # Build ytsaurus core image.
          bash ./ytsaurus/yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-ytsaurus-build --image-tag ${IMAGE_TAG}

          if [[ $GITHUB_REF =~ main$ ]];
          then
            # Build query-tracker image.
            bash ./ytsaurus/yt/docker/query-tracker/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --qt-build-path ../build_qt --output-path ../docker-query-tracker-build --image-tag ${IMAGE_TAG}

             # Build chyt image.
            bash ./ytsaurus/yt/docker/chyt/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --chyt-build-path ../build/yt/chyt --output-path ../docker-chyt-build --image-tag ${IMAGE_TAG}
          fi

          # Build yt local image.
          bash ./ytsaurus/yt/docker/local/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-local-build --image-tag ${IMAGE_TAG}

          # Build images with relwithdebinfo binaries.
          mv ../build_debug/yt/yt/server/all/ytserver-all ../build/yt/yt/server/all/ytserver-all

          if [[ $GITHUB_REF =~ main$ ]];
          then
            mv ../build_qt_debug/ydb/library/yql/tools/mrjob/mrjob ../build_qt/ydb/library/yql/tools/mrjob/mrjob
            mv ../build_debug/yt/chyt/server/bin/ytserver-clickhouse ../build/yt/chyt/server/bin/ytserver-clickhouse
          fi

          # Build ytsaurus core image with relwithdebinfo.
          bash ./ytsaurus/yt/docker/ytsaurus/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-ytsaurus-build --image-tag ${IMAGE_TAG_DEBUG}

          if [[ $GITHUB_REF =~ main$ ]];
          then
            # Build query-tracker image with relwithdebinfo.
            bash ./ytsaurus/yt/docker/query-tracker/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --qt-build-path ../build_qt --output-path ../docker-query-tracker-build --image-tag ${IMAGE_TAG_DEBUG}

            # Build chyt image with relwithdebinfo.
            bash ./ytsaurus/yt/docker/chyt/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --chyt-build-path ../build/yt/chyt --output-path ../docker-chyt-build --image-tag ${IMAGE_TAG_DEBUG}
          fi

          bash ./ytsaurus/yt/docker/local/build.sh --ytsaurus-source-path $(pwd)/ytsaurus --ytsaurus-build-path ../build --output-path ../docker-local-build --image-tag ${IMAGE_TAG_DEBUG}

          if [[ $IMAGE_TAG != "nopush" ]];
          then
            docker push ytsaurus/ytsaurus:${IMAGE_TAG}
            docker tag ytsaurus/ytsaurus:${IMAGE_TAG} ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}
            docker push ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA}

            docker push ytsaurus/ytsaurus:${IMAGE_TAG_DEBUG}
            docker tag ytsaurus/ytsaurus:${IMAGE_TAG_DEBUG} ytsaurus/ytsaurus-nightly:${IMAGE_TAG_DEBUG}-${GITHUB_SHA}
            docker push ytsaurus/ytsaurus-nightly:${IMAGE_TAG_DEBUG}-${GITHUB_SHA}

            if [[ $GITHUB_REF =~ main$ ]];
            then
              docker push ytsaurus/query-tracker:${IMAGE_TAG}
              docker tag ytsaurus/query-tracker:${IMAGE_TAG} ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}
              docker push ytsaurus/query-tracker-nightly:${IMAGE_TAG}-${GITHUB_SHA}

              docker push ytsaurus/query-tracker:${IMAGE_TAG_DEBUG}
              docker tag ytsaurus/query-tracker:${IMAGE_TAG_DEBUG} ytsaurus/query-tracker-nightly:${IMAGE_TAG_DEBUG}-${GITHUB_SHA}
              docker push ytsaurus/query-tracker-nightly:${IMAGE_TAG_DEBUG}-${GITHUB_SHA}

              docker push ytsaurus/chyt:${IMAGE_TAG}
              docker push ytsaurus/chyt:${IMAGE_TAG_DEBUG}
            fi

            docker push ytsaurus/local:${IMAGE_TAG}
            docker push ytsaurus/local:${IMAGE_TAG_DEBUG}
          fi

          if [[ $IMAGE_TAG == 'dev' ]];
          then
            docker tag ytsaurus/ytsaurus-nightly:${IMAGE_TAG}-${GITHUB_SHA} ytsaurus/ytsaurus-nightly:latest
            docker push ytsaurus/ytsaurus-nightly:latest
          fi

      - name: Docker systest
        shell: bash
        run: |
          mkdir -p ../docker-systest-build
          bash ./ytsaurus/yt/docker/systest/build.sh --ytsaurus-source-path $(pwd)/ytsaurus  --ytsaurus-build-path ../build --benchmarks-path benchmark-0.0.1.tgz --output-path ../docker-systest-build --image-tag latest
          docker push ytsaurus/ytsaurus-systest:latest

      - name: Unittests
        shell: bash
        run: |
          cp ./ytsaurus/yt/yt/scripts/run_unittests.sh ../build/
          cd ../build
          ./run_unittests.sh

      - name: Prepare pytest environment
        shell: bash
        run: |
          ytsaurus/yt/yt/scripts/prepare_pytest_environment.sh

      - name: Integration tests
        shell: bash
        run: |
          ytsaurus/yt/yt/scripts/run_integration_tests.sh

      - name: Python tests
        shell: bash
        run: |
          ytsaurus/yt/yt/scripts/run_python_tests.sh

      - name: Testmo unittests upload
        shell: bash
        run: |
          export TESTMO_TOKEN="${{ secrets.NEBIUS_TESTMO_TOKEN }}"
          testmo automation:run:submit --instance https://nebius.testmo.net --project-id 4 --name "Run ${{ github.run_id }}" --source "unittests" --results "../build/junit-*.xml"


  stop-vm:
    name: Stop VM
    needs:
      - start-vm
      - check
    runs-on: trampoline
    if: ${{ always() }}
    steps:
      - name: Stop YC runner
        uses: yc-actions/yc-github-runner@v1
        with:
          mode: stop
          yc-sa-json-credentials: ${{ secrets.YC_SA_JSON_CREDENTIALS }}
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-vm.outputs.label }}
          instance-id: ${{ needs.start-vm.outputs.instance-id }}

  send-notifications:
    name: Send notifications
    needs:
      - stop-vm
    runs-on: trampoline
    if: ${{ failure() }}
    steps:
      - name: Send telegram message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          disable_web_page_preview: true
          format: markdown
          message: |
            Workflow *${{github.workflow}}* failed: ${{github.server_url}}/${{github.repository}}/actions/runs/${{github.run_id}}.
            Git ${{github.ref_type}}: *${{github.ref_name}}*.
            Commit:
            ```
            ${{github.event.head_commit.message}}
            ```

