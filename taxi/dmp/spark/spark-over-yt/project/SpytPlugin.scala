import sbt.PluginTrigger.NoTrigger
import sbt._

import java.io.File
import scala.language.postfixOps


object SpytPlugin extends AutoPlugin {
  override def trigger = NoTrigger

  override def requires = super.requires

  object autoImport {
    val spytClusterVersion = settingKey[String]("Spyt cluster version")
    val spytClientVersion = settingKey[String]("Spyt client version")
    val spytClientPythonVersion = settingKey[String]("yandex-spyt version")
    val spytClientSparkPythonVersion = settingKey[String]("yandex-spark version")

    val spytPublishCluster = taskKey[Unit]("Publish spyt cluster with snapshot version")
    val spytPublishClient = taskKey[Unit]("Publish spyt client with snapshot version")
    val spytPublishAll = taskKey[Unit]("Publish spyt client & cluster with snapshot version")

    val spytReleaseCluster = taskKey[Unit]("Release spyt cluster")
    val spytReleaseClient = taskKey[Unit]("Release spyt client")
    val spytReleaseAll = taskKey[Unit]("Release spyt client & cluster")

    val spytIncreasePythonBetaVersion = taskKey[Unit]("Increase beta-version of yandex-spyt")
    val spytIncreaseSparkPythonBetaVersion = taskKey[Unit]("Increase beta-version of yandex-spark")
    val spytUpdatePythonVersion = taskKey[Unit]("Update versions in data-source/version.py")
  }

  import autoImport._

  def updatePythonVersion(spytVersion: String, sparkVersion: String): Unit = {
    val content =
      s"""# This file is autogenerated, don't edit it manually
        |
        |__version__ = "$spytVersion"
        |__spark_version__ = "$sparkVersion"
        |""".stripMargin
    IO.write(new File("data-source/src/main/python/spyt/version.py"), content)

    val sparkVersionFile = new File("../spark/python/pyspark/version.py")
    val sparkVersionContent = IO.readLines(sparkVersionFile)
      .map {
        case line if line.startsWith("__version__") =>
          s"""__version__ = "$sparkVersion""""
        case line => line
      }
      .mkString("\n")
    IO.write(sparkVersionFile, sparkVersionContent)
  }

  def increaseBetaVersion(oldVersion: String): String = {
    val (version, beta) = if (oldVersion.contains("b")) {
      val split = oldVersion.split("b").toSeq
      (split(0), split(1).toInt)
    } else {
      (oldVersion, 0)
    }

    s"${version}b${beta + 1}"
  }

  def replaceVersion(name: String, oldVersion: String, newVersion: String): Unit = {
    val versionSbt = new File("version.sbt")
    val versionSbtContent = IO.read(versionSbt)
      .replace(
        s"""$name := "$oldVersion"""",
        s"""$name := "$newVersion""""
      )
    IO.write(versionSbt, versionSbtContent)
  }

  override def projectSettings: Seq[Def.Setting[_]] = super.projectSettings ++ Seq(
    spytIncreasePythonBetaVersion := {
      val oldVersion = spytClientPythonVersion.value
      val newVersion = increaseBetaVersion(oldVersion)
      replaceVersion(spytClientPythonVersion.key.label, oldVersion, newVersion)
      updatePythonVersion(newVersion, spytClientSparkPythonVersion.value)
    },
    spytIncreaseSparkPythonBetaVersion := {
      val oldVersion = spytClientSparkPythonVersion.value
      val newVersion = increaseBetaVersion(oldVersion)
      replaceVersion(spytClientSparkPythonVersion.key.label, oldVersion, newVersion)
      updatePythonVersion(spytClientPythonVersion.value, newVersion)
    },
    spytUpdatePythonVersion := {
      updatePythonVersion(spytClientPythonVersion.value, spytClientSparkPythonVersion.value)
    }
  )
}
