# Stubs for pyspark.sql.dataframe (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.sql.types import *

class DataFrame:
    sql_ctx = ...  # type: Any
    is_cached = ...  # type: bool
    def __init__(self, jdf, sql_ctx) -> None: ...
    @property
    def rdd(self): ...
    @property
    def na(self): ...
    @property
    def stat(self): ...
    def toJSON(self, use_unicode: bool = ...): ...
    def registerTempTable(self, name): ...
    def createTempView(self, name): ...
    def createOrReplaceTempView(self, name): ...
    def createGlobalTempView(self, name): ...
    @property
    def write(self): ...
    @property
    def writeStream(self): ...
    @property
    def schema(self): ...
    def printSchema(self): ...
    def explain(self, extended: bool = ...): ...
    def isLocal(self): ...
    @property
    def isStreaming(self): ...
    def show(self, n: int = ..., truncate: bool = ...): ...
    def checkpoint(self, eager: bool = ...): ...
    def withWatermark(self, eventTime, delayThreshold): ...
    def count(self): ...
    def collect(self): ...
    def toLocalIterator(self): ...
    def limit(self, num): ...
    def take(self, num): ...
    def foreach(self, f): ...
    def foreachPartition(self, f): ...
    def cache(self): ...
    def persist(self, storageLevel: Any = ...): ...
    @property
    def storageLevel(self): ...
    def unpersist(self, blocking: bool = ...): ...
    def coalesce(self, numPartitions): ...
    def repartition(self, numPartitions, *cols): ...
    def distinct(self): ...
    def sample(self, withReplacement, fraction, seed: Optional[Any] = ...): ...
    def sampleBy(self, col, fractions, seed: Optional[Any] = ...): ...
    def randomSplit(self, weights, seed: Optional[Any] = ...): ...
    @property
    def dtypes(self): ...
    @property
    def columns(self): ...
    def alias(self, alias): ...
    def crossJoin(self, other): ...
    def join(self, other, on: Optional[Any] = ..., how: Optional[Any] = ...): ...
    def sortWithinPartitions(self, *cols, **kwargs): ...
    def sort(self, *cols, **kwargs): ...
    orderBy = ...  # type: Any
    def describe(self, *cols): ...
    def head(self, n: Optional[Any] = ...): ...
    def first(self): ...
    def __getitem__(self, item): ...
    def __getattr__(self, name): ...
    def select(self, *cols): ...
    def selectExpr(self, *expr): ...
    def filter(self, condition): ...
    def groupBy(self, *cols): ...
    def rollup(self, *cols): ...
    def cube(self, *cols): ...
    def agg(self, *exprs): ...
    def union(self, other): ...
    def unionAll(self, other): ...
    def intersect(self, other): ...
    def subtract(self, other): ...
    def dropDuplicates(self, subset: Optional[Any] = ...): ...
    def dropna(self, how: str = ..., thresh: Optional[Any] = ..., subset: Optional[Any] = ...): ...
    def fillna(self, value, subset: Optional[Any] = ...): ...
    def replace(self, to_replace, value, subset: Optional[Any] = ...): ...
    def approxQuantile(self, col, probabilities, relativeError): ...
    def corr(self, col1, col2, method: Optional[Any] = ...): ...
    def cov(self, col1, col2): ...
    def crosstab(self, col1, col2): ...
    def freqItems(self, cols, support: Optional[Any] = ...): ...
    def withColumn(self, colName, col): ...
    def withColumnRenamed(self, existing, new): ...
    def drop(self, *cols): ...
    def toDF(self, *cols): ...
    def toPandas(self): ...
    groupby = ...  # type: Any
    drop_duplicates = ...  # type: Any
    where = ...  # type: Any

class DataFrameNaFunctions:
    df = ...  # type: Any
    def __init__(self, df) -> None: ...
    def drop(self, how: str = ..., thresh: Optional[Any] = ..., subset: Optional[Any] = ...): ...
    def fill(self, value, subset: Optional[Any] = ...): ...
    def replace(self, to_replace, value, subset: Optional[Any] = ...): ...

class DataFrameStatFunctions:
    df = ...  # type: Any
    def __init__(self, df) -> None: ...
    def approxQuantile(self, col, probabilities, relativeError): ...
    def corr(self, col1, col2, method: Optional[Any] = ...): ...
    def cov(self, col1, col2): ...
    def crosstab(self, col1, col2): ...
    def freqItems(self, cols, support: Optional[Any] = ...): ...
    def sampleBy(self, col, fractions, seed: Optional[Any] = ...): ...

