# Stubs for pyspark.mllib.tree (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.mllib.common import JavaModelWrapper
from pyspark.mllib.util import JavaLoader, JavaSaveable

class TreeEnsembleModel(JavaModelWrapper, JavaSaveable):
    def predict(self, x): ...
    def numTrees(self): ...
    def totalNumNodes(self): ...
    def toDebugString(self): ...

class DecisionTreeModel(JavaModelWrapper, JavaSaveable, JavaLoader):
    def predict(self, x): ...
    def numNodes(self): ...
    def depth(self): ...
    def toDebugString(self): ...

class DecisionTree:
    @classmethod
    def trainClassifier(cls, data, numClasses, categoricalFeaturesInfo, impurity: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ...): ...
    @classmethod
    def trainRegressor(cls, data, categoricalFeaturesInfo, impurity: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ...): ...

class RandomForestModel(TreeEnsembleModel, JavaLoader): ...

class RandomForest:
    supportedFeatureSubsetStrategies = ...  # type: Any
    @classmethod
    def trainClassifier(cls, data, numClasses, categoricalFeaturesInfo, numTrees, featureSubsetStrategy: str = ..., impurity: str = ..., maxDepth: int = ..., maxBins: int = ..., seed: Optional[Any] = ...): ...
    @classmethod
    def trainRegressor(cls, data, categoricalFeaturesInfo, numTrees, featureSubsetStrategy: str = ..., impurity: str = ..., maxDepth: int = ..., maxBins: int = ..., seed: Optional[Any] = ...): ...

class GradientBoostedTreesModel(TreeEnsembleModel, JavaLoader): ...

class GradientBoostedTrees:
    @classmethod
    def trainClassifier(cls, data, categoricalFeaturesInfo, loss: str = ..., numIterations: int = ..., learningRate: float = ..., maxDepth: int = ..., maxBins: int = ...): ...
    @classmethod
    def trainRegressor(cls, data, categoricalFeaturesInfo, loss: str = ..., numIterations: int = ..., learningRate: float = ..., maxDepth: int = ..., maxBins: int = ...): ...
