# Stubs for pyspark.mllib.evaluation (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.mllib.common import JavaModelWrapper

class BinaryClassificationMetrics(JavaModelWrapper):
    def __init__(self, scoreAndLabels) -> None: ...
    @property
    def areaUnderROC(self): ...
    @property
    def areaUnderPR(self): ...
    def unpersist(self): ...

class RegressionMetrics(JavaModelWrapper):
    def __init__(self, predictionAndObservations) -> None: ...
    @property
    def explainedVariance(self): ...
    @property
    def meanAbsoluteError(self): ...
    @property
    def meanSquaredError(self): ...
    @property
    def rootMeanSquaredError(self): ...
    @property
    def r2(self): ...

class MulticlassMetrics(JavaModelWrapper):
    def __init__(self, predictionAndLabels) -> None: ...
    def confusionMatrix(self): ...
    def truePositiveRate(self, label): ...
    def falsePositiveRate(self, label): ...
    def precision(self, label: Optional[Any] = ...): ...
    def recall(self, label: Optional[Any] = ...): ...
    def fMeasure(self, label: Optional[Any] = ..., beta: Optional[Any] = ...): ...
    @property
    def accuracy(self): ...
    @property
    def weightedTruePositiveRate(self): ...
    @property
    def weightedFalsePositiveRate(self): ...
    @property
    def weightedRecall(self): ...
    @property
    def weightedPrecision(self): ...
    def weightedFMeasure(self, beta: Optional[Any] = ...): ...

class RankingMetrics(JavaModelWrapper):
    def __init__(self, predictionAndLabels) -> None: ...
    def precisionAt(self, k): ...
    @property
    def meanAveragePrecision(self): ...
    def ndcgAt(self, k): ...

class MultilabelMetrics(JavaModelWrapper):
    def __init__(self, predictionAndLabels) -> None: ...
    def precision(self, label: Optional[Any] = ...): ...
    def recall(self, label: Optional[Any] = ...): ...
    def f1Measure(self, label: Optional[Any] = ...): ...
    @property
    def microPrecision(self): ...
    @property
    def microRecall(self): ...
    @property
    def microF1Measure(self): ...
    @property
    def hammingLoss(self): ...
    @property
    def subsetAccuracy(self): ...
    @property
    def accuracy(self): ...
