# Stubs for pyspark.mllib.random (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional

class RandomRDDs:
    @staticmethod
    def uniformRDD(sc, size, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def normalRDD(sc, size, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def logNormalRDD(sc, mean, std, size, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def poissonRDD(sc, mean, size, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def exponentialRDD(sc, mean, size, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def gammaRDD(sc, shape, scale, size, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def uniformVectorRDD(sc, numRows, numCols, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def normalVectorRDD(sc, numRows, numCols, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def logNormalVectorRDD(sc, mean, std, numRows, numCols, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def poissonVectorRDD(sc, mean, numRows, numCols, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def exponentialVectorRDD(sc, mean, numRows, numCols, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
    @staticmethod
    def gammaVectorRDD(sc, shape, scale, numRows, numCols, numPartitions: Optional[Any] = ..., seed: Optional[Any] = ...): ...
