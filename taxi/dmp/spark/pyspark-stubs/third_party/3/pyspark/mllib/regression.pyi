# Stubs for pyspark.mllib.regression (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.mllib.util import Saveable, Loader

class LabeledPoint:
    label = ...  # type: Any
    features = ...  # type: Any
    def __init__(self, label, features) -> None: ...
    def __reduce__(self): ...

class LinearModel:
    def __init__(self, weights, intercept) -> None: ...
    @property
    def weights(self): ...
    @property
    def intercept(self): ...

class LinearRegressionModelBase(LinearModel):
    def predict(self, x): ...

class LinearRegressionModel(LinearRegressionModelBase):
    def save(self, sc, path): ...
    @classmethod
    def load(cls, sc, path): ...

class LinearRegressionWithSGD:
    @classmethod
    def train(cls, data, iterations: int = ..., step: float = ..., miniBatchFraction: float = ..., initialWeights: Optional[Any] = ..., regParam: float = ..., regType: Optional[Any] = ..., intercept: bool = ..., validateData: bool = ..., convergenceTol: float = ...): ...

class LassoModel(LinearRegressionModelBase):
    def save(self, sc, path): ...
    @classmethod
    def load(cls, sc, path): ...

class LassoWithSGD:
    @classmethod
    def train(cls, data, iterations: int = ..., step: float = ..., regParam: float = ..., miniBatchFraction: float = ..., initialWeights: Optional[Any] = ..., intercept: bool = ..., validateData: bool = ..., convergenceTol: float = ...): ...

class RidgeRegressionModel(LinearRegressionModelBase):
    def save(self, sc, path): ...
    @classmethod
    def load(cls, sc, path): ...

class RidgeRegressionWithSGD:
    @classmethod
    def train(cls, data, iterations: int = ..., step: float = ..., regParam: float = ..., miniBatchFraction: float = ..., initialWeights: Optional[Any] = ..., intercept: bool = ..., validateData: bool = ..., convergenceTol: float = ...): ...

class IsotonicRegressionModel(Saveable, Loader):
    boundaries = ...  # type: Any
    predictions = ...  # type: Any
    isotonic = ...  # type: Any
    def __init__(self, boundaries, predictions, isotonic) -> None: ...
    def predict(self, x): ...
    def save(self, sc, path): ...
    @classmethod
    def load(cls, sc, path): ...

class IsotonicRegression:
    @classmethod
    def train(cls, data, isotonic: bool = ...): ...

class StreamingLinearAlgorithm:
    def __init__(self, model) -> None: ...
    def latestModel(self): ...
    def predictOn(self, dstream): ...
    def predictOnValues(self, dstream): ...

class StreamingLinearRegressionWithSGD(StreamingLinearAlgorithm):
    stepSize = ...  # type: Any
    numIterations = ...  # type: Any
    miniBatchFraction = ...  # type: Any
    convergenceTol = ...  # type: Any
    def __init__(self, stepSize: float = ..., numIterations: int = ..., miniBatchFraction: float = ..., convergenceTol: float = ...) -> None: ...
    def setInitialWeights(self, initialWeights): ...
    def trainOn(self, dstream): ...
