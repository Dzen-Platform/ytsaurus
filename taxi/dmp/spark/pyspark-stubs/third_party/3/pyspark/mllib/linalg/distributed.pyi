# Stubs for pyspark.mllib.linalg.distributed (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any

class DistributedMatrix:
    def numRows(self): ...
    def numCols(self): ...

class RowMatrix(DistributedMatrix):
    def __init__(self, rows, numRows: int = ..., numCols: int = ...) -> None: ...
    @property
    def rows(self): ...
    def numRows(self): ...
    def numCols(self): ...
    def computeColumnSummaryStatistics(self): ...
    def computeCovariance(self): ...
    def computeGramianMatrix(self): ...
    def columnSimilarities(self, threshold: float = ...): ...
    def tallSkinnyQR(self, computeQ: bool = ...): ...

class IndexedRow:
    index = ...  # type: Any
    vector = ...  # type: Any
    def __init__(self, index, vector) -> None: ...

class IndexedRowMatrix(DistributedMatrix):
    def __init__(self, rows, numRows: int = ..., numCols: int = ...) -> None: ...
    @property
    def rows(self): ...
    def numRows(self): ...
    def numCols(self): ...
    def columnSimilarities(self): ...
    def computeGramianMatrix(self): ...
    def toRowMatrix(self): ...
    def toCoordinateMatrix(self): ...
    def toBlockMatrix(self, rowsPerBlock: int = ..., colsPerBlock: int = ...): ...

class MatrixEntry:
    i = ...  # type: Any
    j = ...  # type: Any
    value = ...  # type: Any
    def __init__(self, i, j, value) -> None: ...

class CoordinateMatrix(DistributedMatrix):
    def __init__(self, entries, numRows: int = ..., numCols: int = ...) -> None: ...
    @property
    def entries(self): ...
    def numRows(self): ...
    def numCols(self): ...
    def transpose(self): ...
    def toRowMatrix(self): ...
    def toIndexedRowMatrix(self): ...
    def toBlockMatrix(self, rowsPerBlock: int = ..., colsPerBlock: int = ...): ...

class BlockMatrix(DistributedMatrix):
    def __init__(self, blocks, rowsPerBlock, colsPerBlock, numRows: int = ..., numCols: int = ...) -> None: ...
    @property
    def blocks(self): ...
    @property
    def rowsPerBlock(self): ...
    @property
    def colsPerBlock(self): ...
    @property
    def numRowBlocks(self): ...
    @property
    def numColBlocks(self): ...
    def numRows(self): ...
    def numCols(self): ...
    def cache(self): ...
    def persist(self, storageLevel): ...
    def validate(self): ...
    def add(self, other): ...
    def subtract(self, other): ...
    def multiply(self, other): ...
    def transpose(self): ...
    def toLocalMatrix(self): ...
    def toIndexedRowMatrix(self): ...
    def toCoordinateMatrix(self): ...
