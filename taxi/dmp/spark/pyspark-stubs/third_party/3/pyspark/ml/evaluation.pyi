# Stubs for pyspark.ml.evaluation (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.ml.wrapper import JavaParams
from pyspark.ml.param import Params
from pyspark.ml.param.shared import HasLabelCol, HasPredictionCol, HasRawPredictionCol
from pyspark.ml.util import JavaMLReadable, JavaMLWritable

class Evaluator(Params):
    __metaclass__ = ...  # type: Any
    def evaluate(self, dataset, params: Optional[Any] = ...): ...
    def isLargerBetter(self): ...

class JavaEvaluator(JavaParams, Evaluator):
    __metaclass__ = ...  # type: Any
    def isLargerBetter(self): ...

class BinaryClassificationEvaluator(JavaEvaluator, HasLabelCol, HasRawPredictionCol, JavaMLReadable, JavaMLWritable):
    metricName = ...  # type: Any
    def __init__(self, rawPredictionCol: str = ..., labelCol: str = ..., metricName: str = ...) -> None: ...
    def setMetricName(self, value): ...
    def getMetricName(self): ...
    def setParams(self, rawPredictionCol: str = ..., labelCol: str = ..., metricName: str = ...): ...

class RegressionEvaluator(JavaEvaluator, HasLabelCol, HasPredictionCol, JavaMLReadable, JavaMLWritable):
    metricName = ...  # type: Any
    def __init__(self, predictionCol: str = ..., labelCol: str = ..., metricName: str = ...) -> None: ...
    def setMetricName(self, value): ...
    def getMetricName(self): ...
    def setParams(self, predictionCol: str = ..., labelCol: str = ..., metricName: str = ...): ...

class MulticlassClassificationEvaluator(JavaEvaluator, HasLabelCol, HasPredictionCol, JavaMLReadable, JavaMLWritable):
    metricName = ...  # type: Any
    def __init__(self, predictionCol: str = ..., labelCol: str = ..., metricName: str = ...) -> None: ...
    def setMetricName(self, value): ...
    def getMetricName(self): ...
    def setParams(self, predictionCol: str = ..., labelCol: str = ..., metricName: str = ...): ...
