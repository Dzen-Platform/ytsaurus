# Stubs for pyspark.ml.clustering (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.ml.util import *
from pyspark.ml.wrapper import JavaEstimator, JavaModel, JavaWrapper
from pyspark.ml.param.shared import *

class ClusteringSummary(JavaWrapper):
    @property
    def predictionCol(self): ...
    @property
    def predictions(self): ...
    @property
    def featuresCol(self): ...
    @property
    def k(self): ...
    @property
    def cluster(self): ...
    @property
    def clusterSizes(self): ...

class GaussianMixtureModel(JavaModel, JavaMLWritable, JavaMLReadable):
    @property
    def weights(self): ...
    @property
    def gaussiansDF(self): ...
    @property
    def hasSummary(self): ...
    @property
    def summary(self): ...

class GaussianMixture(JavaEstimator, HasFeaturesCol, HasPredictionCol, HasMaxIter, HasTol, HasSeed, HasProbabilityCol, JavaMLWritable, JavaMLReadable):
    k = ...  # type: Any
    def __init__(self, featuresCol: str = ..., predictionCol: str = ..., k: int = ..., probabilityCol: str = ..., tol: float = ..., maxIter: int = ..., seed: Optional[Any] = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., predictionCol: str = ..., k: int = ..., probabilityCol: str = ..., tol: float = ..., maxIter: int = ..., seed: Optional[Any] = ...): ...
    def setK(self, value): ...
    def getK(self): ...

class GaussianMixtureSummary(ClusteringSummary):
    @property
    def probabilityCol(self): ...
    @property
    def probability(self): ...

class KMeansSummary(ClusteringSummary): ...

class KMeansModel(JavaModel, JavaMLWritable, JavaMLReadable):
    def clusterCenters(self): ...
    def computeCost(self, dataset): ...
    @property
    def hasSummary(self): ...
    @property
    def summary(self): ...

class KMeans(JavaEstimator, HasFeaturesCol, HasPredictionCol, HasMaxIter, HasTol, HasSeed, JavaMLWritable, JavaMLReadable):
    k = ...  # type: Any
    initMode = ...  # type: Any
    initSteps = ...  # type: Any
    def __init__(self, featuresCol: str = ..., predictionCol: str = ..., k: int = ..., initMode: str = ..., initSteps: int = ..., tol: float = ..., maxIter: int = ..., seed: Optional[Any] = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., predictionCol: str = ..., k: int = ..., initMode: str = ..., initSteps: int = ..., tol: float = ..., maxIter: int = ..., seed: Optional[Any] = ...): ...
    def setK(self, value): ...
    def getK(self): ...
    def setInitMode(self, value): ...
    def getInitMode(self): ...
    def setInitSteps(self, value): ...
    def getInitSteps(self): ...

class BisectingKMeansModel(JavaModel, JavaMLWritable, JavaMLReadable):
    def clusterCenters(self): ...
    def computeCost(self, dataset): ...
    @property
    def hasSummary(self): ...
    @property
    def summary(self): ...

class BisectingKMeans(JavaEstimator, HasFeaturesCol, HasPredictionCol, HasMaxIter, HasSeed, JavaMLWritable, JavaMLReadable):
    k = ...  # type: Any
    minDivisibleClusterSize = ...  # type: Any
    def __init__(self, featuresCol: str = ..., predictionCol: str = ..., maxIter: int = ..., seed: Optional[Any] = ..., k: int = ..., minDivisibleClusterSize: float = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., predictionCol: str = ..., maxIter: int = ..., seed: Optional[Any] = ..., k: int = ..., minDivisibleClusterSize: float = ...): ...
    def setK(self, value): ...
    def getK(self): ...
    def setMinDivisibleClusterSize(self, value): ...
    def getMinDivisibleClusterSize(self): ...

class BisectingKMeansSummary(ClusteringSummary): ...

class LDAModel(JavaModel):
    def isDistributed(self): ...
    def vocabSize(self): ...
    def topicsMatrix(self): ...
    def logLikelihood(self, dataset): ...
    def logPerplexity(self, dataset): ...
    def describeTopics(self, maxTermsPerTopic: int = ...): ...
    def estimatedDocConcentration(self): ...

class DistributedLDAModel(LDAModel, JavaMLReadable, JavaMLWritable):
    def toLocal(self): ...
    def trainingLogLikelihood(self): ...
    def logPrior(self): ...
    def getCheckpointFiles(self): ...

class LocalLDAModel(LDAModel, JavaMLReadable, JavaMLWritable): ...

class LDA(JavaEstimator, HasFeaturesCol, HasMaxIter, HasSeed, HasCheckpointInterval, JavaMLReadable, JavaMLWritable):
    k = ...  # type: Any
    optimizer = ...  # type: Any
    learningOffset = ...  # type: Any
    learningDecay = ...  # type: Any
    subsamplingRate = ...  # type: Any
    optimizeDocConcentration = ...  # type: Any
    docConcentration = ...  # type: Any
    topicConcentration = ...  # type: Any
    topicDistributionCol = ...  # type: Any
    keepLastCheckpoint = ...  # type: Any
    def __init__(self, featuresCol: str = ..., maxIter: int = ..., seed: Optional[Any] = ..., checkpointInterval: int = ..., k: int = ..., optimizer: str = ..., learningOffset: float = ..., learningDecay: float = ..., subsamplingRate: float = ..., optimizeDocConcentration: bool = ..., docConcentration: Optional[Any] = ..., topicConcentration: Optional[Any] = ..., topicDistributionCol: str = ..., keepLastCheckpoint: bool = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., maxIter: int = ..., seed: Optional[Any] = ..., checkpointInterval: int = ..., k: int = ..., optimizer: str = ..., learningOffset: float = ..., learningDecay: float = ..., subsamplingRate: float = ..., optimizeDocConcentration: bool = ..., docConcentration: Optional[Any] = ..., topicConcentration: Optional[Any] = ..., topicDistributionCol: str = ..., keepLastCheckpoint: bool = ...): ...
    def setK(self, value): ...
    def getK(self): ...
    def setOptimizer(self, value): ...
    def getOptimizer(self): ...
    def setLearningOffset(self, value): ...
    def getLearningOffset(self): ...
    def setLearningDecay(self, value): ...
    def getLearningDecay(self): ...
    def setSubsamplingRate(self, value): ...
    def getSubsamplingRate(self): ...
    def setOptimizeDocConcentration(self, value): ...
    def getOptimizeDocConcentration(self): ...
    def setDocConcentration(self, value): ...
    def getDocConcentration(self): ...
    def setTopicConcentration(self, value): ...
    def getTopicConcentration(self): ...
    def setTopicDistributionCol(self, value): ...
    def getTopicDistributionCol(self): ...
    def setKeepLastCheckpoint(self, value): ...
    def getKeepLastCheckpoint(self): ...
