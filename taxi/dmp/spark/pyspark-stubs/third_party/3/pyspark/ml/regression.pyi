# Stubs for pyspark.ml.regression (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.ml.param.shared import *
from pyspark.ml.util import *
from pyspark.ml.wrapper import JavaEstimator, JavaModel, JavaWrapper

class LinearRegression(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredictionCol, HasMaxIter, HasRegParam, HasTol, HasElasticNetParam, HasFitIntercept, HasStandardization, HasSolver, HasWeightCol, HasAggregationDepth, JavaMLWritable, JavaMLReadable):
    def __init__(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxIter: int = ..., regParam: float = ..., elasticNetParam: float = ..., tol: float = ..., fitIntercept: bool = ..., standardization: bool = ..., solver: str = ..., weightCol: Optional[Any] = ..., aggregationDepth: int = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxIter: int = ..., regParam: float = ..., elasticNetParam: float = ..., tol: float = ..., fitIntercept: bool = ..., standardization: bool = ..., solver: str = ..., weightCol: Optional[Any] = ..., aggregationDepth: int = ...): ...

class LinearRegressionModel(JavaModel, JavaPredictionModel, JavaMLWritable, JavaMLReadable):
    @property
    def coefficients(self): ...
    @property
    def intercept(self): ...
    @property
    def summary(self): ...
    @property
    def hasSummary(self): ...
    def evaluate(self, dataset): ...

class LinearRegressionSummary(JavaWrapper):
    @property
    def predictions(self): ...
    @property
    def predictionCol(self): ...
    @property
    def labelCol(self): ...
    @property
    def featuresCol(self): ...
    @property
    def explainedVariance(self): ...
    @property
    def meanAbsoluteError(self): ...
    @property
    def meanSquaredError(self): ...
    @property
    def rootMeanSquaredError(self): ...
    @property
    def r2(self): ...
    @property
    def residuals(self): ...
    @property
    def numInstances(self): ...
    @property
    def devianceResiduals(self): ...
    @property
    def coefficientStandardErrors(self): ...
    @property
    def tValues(self): ...
    @property
    def pValues(self): ...

class LinearRegressionTrainingSummary(LinearRegressionSummary):
    @property
    def objectiveHistory(self): ...
    @property
    def totalIterations(self): ...

class IsotonicRegression(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredictionCol, HasWeightCol, JavaMLWritable, JavaMLReadable):
    isotonic = ...  # type: Any
    featureIndex = ...  # type: Any
    def __init__(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., weightCol: Optional[Any] = ..., isotonic: bool = ..., featureIndex: int = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., weightCol: Optional[Any] = ..., isotonic: bool = ..., featureIndex: int = ...): ...
    def setIsotonic(self, value): ...
    def getIsotonic(self): ...
    def setFeatureIndex(self, value): ...
    def getFeatureIndex(self): ...

class IsotonicRegressionModel(JavaModel, JavaMLWritable, JavaMLReadable):
    @property
    def boundaries(self): ...
    @property
    def predictions(self): ...

class TreeEnsembleParams(DecisionTreeParams):
    subsamplingRate = ...  # type: Any
    def __init__(self) -> None: ...
    def setSubsamplingRate(self, value): ...
    def getSubsamplingRate(self): ...

class TreeRegressorParams(Params):
    supportedImpurities = ...  # type: Any
    impurity = ...  # type: Any
    def __init__(self) -> None: ...
    def setImpurity(self, value): ...
    def getImpurity(self): ...

class RandomForestParams(TreeEnsembleParams):
    supportedFeatureSubsetStrategies = ...  # type: Any
    numTrees = ...  # type: Any
    featureSubsetStrategy = ...  # type: Any
    def __init__(self) -> None: ...
    def setNumTrees(self, value): ...
    def getNumTrees(self): ...
    def setFeatureSubsetStrategy(self, value): ...
    def getFeatureSubsetStrategy(self): ...

class GBTParams(TreeEnsembleParams):
    supportedLossTypes = ...  # type: Any

class DecisionTreeRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredictionCol, DecisionTreeParams, TreeRegressorParams, HasCheckpointInterval, HasSeed, JavaMLWritable, JavaMLReadable, HasVarianceCol):
    def __init__(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ..., maxMemoryInMB: int = ..., cacheNodeIds: bool = ..., checkpointInterval: int = ..., impurity: str = ..., seed: Optional[Any] = ..., varianceCol: Optional[Any] = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ..., maxMemoryInMB: int = ..., cacheNodeIds: bool = ..., checkpointInterval: int = ..., impurity: str = ..., seed: Optional[Any] = ..., varianceCol: Optional[Any] = ...): ...

class DecisionTreeModel(JavaModel, JavaPredictionModel):
    @property
    def numNodes(self): ...
    @property
    def depth(self): ...
    @property
    def toDebugString(self): ...

class TreeEnsembleModel(JavaModel):
    @property
    def trees(self): ...
    @property
    def getNumTrees(self): ...
    @property
    def treeWeights(self): ...
    @property
    def totalNumNodes(self): ...
    @property
    def toDebugString(self): ...

class DecisionTreeRegressionModel(DecisionTreeModel, JavaMLWritable, JavaMLReadable):
    @property
    def featureImportances(self): ...

class RandomForestRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredictionCol, HasSeed, RandomForestParams, TreeRegressorParams, HasCheckpointInterval, JavaMLWritable, JavaMLReadable):
    def __init__(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ..., maxMemoryInMB: int = ..., cacheNodeIds: bool = ..., checkpointInterval: int = ..., impurity: str = ..., subsamplingRate: float = ..., seed: Optional[Any] = ..., numTrees: int = ..., featureSubsetStrategy: str = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ..., maxMemoryInMB: int = ..., cacheNodeIds: bool = ..., checkpointInterval: int = ..., impurity: str = ..., subsamplingRate: float = ..., seed: Optional[Any] = ..., numTrees: int = ..., featureSubsetStrategy: str = ...): ...

class RandomForestRegressionModel(TreeEnsembleModel, JavaPredictionModel, JavaMLWritable, JavaMLReadable):
    @property
    def trees(self): ...
    @property
    def featureImportances(self): ...

class GBTRegressor(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredictionCol, HasMaxIter, GBTParams, HasCheckpointInterval, HasStepSize, HasSeed, JavaMLWritable, JavaMLReadable, TreeRegressorParams):
    lossType = ...  # type: Any
    def __init__(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ..., maxMemoryInMB: int = ..., cacheNodeIds: bool = ..., subsamplingRate: float = ..., checkpointInterval: int = ..., lossType: str = ..., maxIter: int = ..., stepSize: float = ..., seed: Optional[Any] = ..., impurity: str = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., maxDepth: int = ..., maxBins: int = ..., minInstancesPerNode: int = ..., minInfoGain: float = ..., maxMemoryInMB: int = ..., cacheNodeIds: bool = ..., subsamplingRate: float = ..., checkpointInterval: int = ..., lossType: str = ..., maxIter: int = ..., stepSize: float = ..., seed: Optional[Any] = ..., impuriy: str = ...): ...
    def setLossType(self, value): ...
    def getLossType(self): ...

class GBTRegressionModel(TreeEnsembleModel, JavaPredictionModel, JavaMLWritable, JavaMLReadable):
    @property
    def featureImportances(self): ...
    @property
    def trees(self): ...

class AFTSurvivalRegression(JavaEstimator, HasFeaturesCol, HasLabelCol, HasPredictionCol, HasFitIntercept, HasMaxIter, HasTol, HasAggregationDepth, JavaMLWritable, JavaMLReadable):
    censorCol = ...  # type: Any
    quantileProbabilities = ...  # type: Any
    quantilesCol = ...  # type: Any
    def __init__(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., fitIntercept: bool = ..., maxIter: int = ..., tol: float = ..., censorCol: str = ..., quantileProbabilities: Any = ..., quantilesCol: Optional[Any] = ..., aggregationDepth: int = ...) -> None: ...
    def setParams(self, featuresCol: str = ..., labelCol: str = ..., predictionCol: str = ..., fitIntercept: bool = ..., maxIter: int = ..., tol: float = ..., censorCol: str = ..., quantileProbabilities: Any = ..., quantilesCol: Optional[Any] = ..., aggregationDepth: int = ...): ...
    def setCensorCol(self, value): ...
    def getCensorCol(self): ...
    def setQuantileProbabilities(self, value): ...
    def getQuantileProbabilities(self): ...
    def setQuantilesCol(self, value): ...
    def getQuantilesCol(self): ...

class AFTSurvivalRegressionModel(JavaModel, JavaMLWritable, JavaMLReadable):
    @property
    def coefficients(self): ...
    @property
    def intercept(self): ...
    @property
    def scale(self): ...
    def predictQuantiles(self, features): ...
    def predict(self, features): ...

class GeneralizedLinearRegression(JavaEstimator, HasLabelCol, HasFeaturesCol, HasPredictionCol, HasFitIntercept, HasMaxIter, HasTol, HasRegParam, HasWeightCol, HasSolver, JavaMLWritable, JavaMLReadable):
    family = ...  # type: Any
    link = ...  # type: Any
    linkPredictionCol = ...  # type: Any
    def __init__(self, labelCol: str = ..., featuresCol: str = ..., predictionCol: str = ..., family: str = ..., link: Optional[Any] = ..., fitIntercept: bool = ..., maxIter: int = ..., tol: float = ..., regParam: float = ..., weightCol: Optional[Any] = ..., solver: str = ..., linkPredictionCol: Optional[Any] = ...) -> None: ...
    def setParams(self, labelCol: str = ..., featuresCol: str = ..., predictionCol: str = ..., family: str = ..., link: Optional[Any] = ..., fitIntercept: bool = ..., maxIter: int = ..., tol: float = ..., regParam: float = ..., weightCol: Optional[Any] = ..., solver: str = ..., linkPredictionCol: Optional[Any] = ...): ...
    def setFamily(self, value): ...
    def getFamily(self): ...
    def setLinkPredictionCol(self, value): ...
    def getLinkPredictionCol(self): ...
    def setLink(self, value): ...
    def getLink(self): ...

class GeneralizedLinearRegressionModel(JavaModel, JavaPredictionModel, JavaMLWritable, JavaMLReadable):
    @property
    def coefficients(self): ...
    @property
    def intercept(self): ...
    @property
    def summary(self): ...
    @property
    def hasSummary(self): ...
    def evaluate(self, dataset): ...

class GeneralizedLinearRegressionSummary(JavaWrapper):
    @property
    def predictions(self): ...
    @property
    def predictionCol(self): ...
    @property
    def rank(self): ...
    @property
    def degreesOfFreedom(self): ...
    @property
    def residualDegreeOfFreedom(self): ...
    @property
    def residualDegreeOfFreedomNull(self): ...
    def residuals(self, residualsType: str = ...): ...
    @property
    def nullDeviance(self): ...
    @property
    def deviance(self): ...
    @property
    def dispersion(self): ...
    @property
    def aic(self): ...

class GeneralizedLinearRegressionTrainingSummary(GeneralizedLinearRegressionSummary):
    @property
    def numIterations(self): ...
    @property
    def solver(self): ...
    @property
    def coefficientStandardErrors(self): ...
    @property
    def tValues(self): ...
    @property
    def pValues(self): ...
