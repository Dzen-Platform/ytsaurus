# Stubs for pyspark.ml.feature (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.ml.param.shared import *
from pyspark.ml.util import JavaMLReadable, JavaMLWritable
from pyspark.ml.wrapper import JavaEstimator, JavaModel, JavaTransformer

class Binarizer(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    threshold = ...  # type: Any
    def __init__(self, threshold: float = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, threshold: float = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setThreshold(self, value): ...
    def getThreshold(self): ...

class Bucketizer(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    splits = ...  # type: Any
    handleInvalid = ...  # type: Any
    def __init__(self, splits: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., handleInvalid: str = ...) -> None: ...
    def setParams(self, splits: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., handleInvalid: str = ...): ...
    def setSplits(self, value): ...
    def getSplits(self): ...
    def setHandleInvalid(self, value): ...
    def getHandleInvalid(self): ...

class CountVectorizer(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    minTF = ...  # type: Any
    minDF = ...  # type: Any
    vocabSize = ...  # type: Any
    binary = ...  # type: Any
    def __init__(self, minTF: float = ..., minDF: float = ..., vocabSize: Any = ..., binary: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, minTF: float = ..., minDF: float = ..., vocabSize: Any = ..., binary: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setMinTF(self, value): ...
    def getMinTF(self): ...
    def setMinDF(self, value): ...
    def getMinDF(self): ...
    def setVocabSize(self, value): ...
    def getVocabSize(self): ...
    def setBinary(self, value): ...
    def getBinary(self): ...

class CountVectorizerModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def vocabulary(self): ...

class DCT(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    inverse = ...  # type: Any
    def __init__(self, inverse: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, inverse: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setInverse(self, value): ...
    def getInverse(self): ...

class ElementwiseProduct(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    scalingVec = ...  # type: Any
    def __init__(self, scalingVec: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, scalingVec: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setScalingVec(self, value): ...
    def getScalingVec(self): ...

class HashingTF(JavaTransformer, HasInputCol, HasOutputCol, HasNumFeatures, JavaMLReadable, JavaMLWritable):
    binary = ...  # type: Any
    def __init__(self, numFeatures: Any = ..., binary: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, numFeatures: Any = ..., binary: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setBinary(self, value): ...
    def getBinary(self): ...

class IDF(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    minDocFreq = ...  # type: Any
    def __init__(self, minDocFreq: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, minDocFreq: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setMinDocFreq(self, value): ...
    def getMinDocFreq(self): ...

class IDFModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def idf(self): ...

class MaxAbsScaler(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    def __init__(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...

class MaxAbsScalerModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def maxAbs(self): ...

class MinMaxScaler(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    min = ...  # type: Any
    max = ...  # type: Any
    def __init__(self, min: float = ..., max: float = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, min: float = ..., max: float = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setMin(self, value): ...
    def getMin(self): ...
    def setMax(self, value): ...
    def getMax(self): ...

class MinMaxScalerModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def originalMin(self): ...
    @property
    def originalMax(self): ...

class NGram(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    n = ...  # type: Any
    def __init__(self, n: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, n: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setN(self, value): ...
    def getN(self): ...

class Normalizer(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    p = ...  # type: Any
    def __init__(self, p: float = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, p: float = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setP(self, value): ...
    def getP(self): ...

class OneHotEncoder(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    dropLast = ...  # type: Any
    def __init__(self, dropLast: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, dropLast: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setDropLast(self, value): ...
    def getDropLast(self): ...

class PolynomialExpansion(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    degree = ...  # type: Any
    def __init__(self, degree: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, degree: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setDegree(self, value): ...
    def getDegree(self): ...

class QuantileDiscretizer(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    numBuckets = ...  # type: Any
    relativeError = ...  # type: Any
    handleInvalid = ...  # type: Any
    def __init__(self, numBuckets: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., relativeError: float = ..., handleInvalid: str = ...) -> None: ...
    def setParams(self, numBuckets: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., relativeError: float = ..., handleInvalid: str = ...): ...
    def setNumBuckets(self, value): ...
    def getNumBuckets(self): ...
    def setRelativeError(self, value): ...
    def getRelativeError(self): ...
    def setHandleInvalid(self, value): ...
    def getHandleInvalid(self): ...

class RegexTokenizer(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    minTokenLength = ...  # type: Any
    gaps = ...  # type: Any
    pattern = ...  # type: Any
    toLowercase = ...  # type: Any
    def __init__(self, minTokenLength: int = ..., gaps: bool = ..., pattern: str = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., toLowercase: bool = ...) -> None: ...
    def setParams(self, minTokenLength: int = ..., gaps: bool = ..., pattern: str = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., toLowercase: bool = ...): ...
    def setMinTokenLength(self, value): ...
    def getMinTokenLength(self): ...
    def setGaps(self, value): ...
    def getGaps(self): ...
    def setPattern(self, value): ...
    def getPattern(self): ...
    def setToLowercase(self, value): ...
    def getToLowercase(self): ...

class SQLTransformer(JavaTransformer, JavaMLReadable, JavaMLWritable):
    statement = ...  # type: Any
    def __init__(self, statement: Optional[Any] = ...) -> None: ...
    def setParams(self, statement: Optional[Any] = ...): ...
    def setStatement(self, value): ...
    def getStatement(self): ...

class StandardScaler(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    withMean = ...  # type: Any
    withStd = ...  # type: Any
    def __init__(self, withMean: bool = ..., withStd: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, withMean: bool = ..., withStd: bool = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setWithMean(self, value): ...
    def getWithMean(self): ...
    def setWithStd(self, value): ...
    def getWithStd(self): ...

class StandardScalerModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def std(self): ...
    @property
    def mean(self): ...

class StringIndexer(JavaEstimator, HasInputCol, HasOutputCol, HasHandleInvalid, JavaMLReadable, JavaMLWritable):
    def __init__(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., handleInvalid: str = ...) -> None: ...
    def setParams(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., handleInvalid: str = ...): ...

class StringIndexerModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def labels(self): ...

class IndexToString(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    labels = ...  # type: Any
    def __init__(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., labels: Optional[Any] = ...) -> None: ...
    def setParams(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., labels: Optional[Any] = ...): ...
    def setLabels(self, value): ...
    def getLabels(self): ...

class StopWordsRemover(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    stopWords = ...  # type: Any
    caseSensitive = ...  # type: Any
    def __init__(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., stopWords: Optional[Any] = ..., caseSensitive: bool = ...) -> None: ...
    def setParams(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., stopWords: Optional[Any] = ..., caseSensitive: bool = ...): ...
    def setStopWords(self, value): ...
    def getStopWords(self): ...
    def setCaseSensitive(self, value): ...
    def getCaseSensitive(self): ...
    @staticmethod
    def loadDefaultStopWords(language): ...

class Tokenizer(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    def __init__(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...

class VectorAssembler(JavaTransformer, HasInputCols, HasOutputCol, JavaMLReadable, JavaMLWritable):
    def __init__(self, inputCols: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, inputCols: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...

class VectorIndexer(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    maxCategories = ...  # type: Any
    def __init__(self, maxCategories: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, maxCategories: int = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setMaxCategories(self, value): ...
    def getMaxCategories(self): ...

class VectorIndexerModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def numFeatures(self): ...
    @property
    def categoryMaps(self): ...

class VectorSlicer(JavaTransformer, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    indices = ...  # type: Any
    names = ...  # type: Any
    def __init__(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., indices: Optional[Any] = ..., names: Optional[Any] = ...) -> None: ...
    def setParams(self, inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., indices: Optional[Any] = ..., names: Optional[Any] = ...): ...
    def setIndices(self, value): ...
    def getIndices(self): ...
    def setNames(self, value): ...
    def getNames(self): ...

class Word2Vec(JavaEstimator, HasStepSize, HasMaxIter, HasSeed, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    vectorSize = ...  # type: Any
    numPartitions = ...  # type: Any
    minCount = ...  # type: Any
    windowSize = ...  # type: Any
    maxSentenceLength = ...  # type: Any
    def __init__(self, vectorSize: int = ..., minCount: int = ..., numPartitions: int = ..., stepSize: float = ..., maxIter: int = ..., seed: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., windowSize: int = ..., maxSentenceLength: int = ...) -> None: ...
    def setParams(self, vectorSize: int = ..., minCount: int = ..., numPartitions: int = ..., stepSize: float = ..., maxIter: int = ..., seed: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ..., windowSize: int = ..., maxSentenceLength: int = ...): ...
    def setVectorSize(self, value): ...
    def getVectorSize(self): ...
    def setNumPartitions(self, value): ...
    def getNumPartitions(self): ...
    def setMinCount(self, value): ...
    def getMinCount(self): ...
    def setWindowSize(self, value): ...
    def getWindowSize(self): ...
    def setMaxSentenceLength(self, value): ...
    def getMaxSentenceLength(self): ...

class Word2VecModel(JavaModel, JavaMLReadable, JavaMLWritable):
    def getVectors(self): ...
    def findSynonyms(self, word, num): ...

class PCA(JavaEstimator, HasInputCol, HasOutputCol, JavaMLReadable, JavaMLWritable):
    k = ...  # type: Any
    def __init__(self, k: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...) -> None: ...
    def setParams(self, k: Optional[Any] = ..., inputCol: Optional[Any] = ..., outputCol: Optional[Any] = ...): ...
    def setK(self, value): ...
    def getK(self): ...

class PCAModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def pc(self): ...
    @property
    def explainedVariance(self): ...

class RFormula(JavaEstimator, HasFeaturesCol, HasLabelCol, JavaMLReadable, JavaMLWritable):
    formula = ...  # type: Any
    forceIndexLabel = ...  # type: Any
    def __init__(self, formula: Optional[Any] = ..., featuresCol: str = ..., labelCol: str = ..., forceIndexLabel: bool = ...) -> None: ...
    def setParams(self, formula: Optional[Any] = ..., featuresCol: str = ..., labelCol: str = ..., forceIndexLabel: bool = ...): ...
    def setFormula(self, value): ...
    def getFormula(self): ...
    def setForceIndexLabel(self, value): ...
    def getForceIndexLabel(self): ...

class RFormulaModel(JavaModel, JavaMLReadable, JavaMLWritable): ...

class ChiSqSelector(JavaEstimator, HasFeaturesCol, HasOutputCol, HasLabelCol, JavaMLReadable, JavaMLWritable):
    selectorType = ...  # type: Any
    numTopFeatures = ...  # type: Any
    percentile = ...  # type: Any
    fpr = ...  # type: Any
    def __init__(self, numTopFeatures: int = ..., featuresCol: str = ..., outputCol: Optional[Any] = ..., labelCol: str = ..., selectorType: str = ..., percentile: float = ..., fpr: float = ...) -> None: ...
    def setParams(self, numTopFeatures: int = ..., featuresCol: str = ..., outputCol: Optional[Any] = ..., labelCol: str = ..., selectorType: str = ..., percentile: float = ..., fpr: float = ...): ...
    def setSelectorType(self, value): ...
    def getSelectorType(self): ...
    def setNumTopFeatures(self, value): ...
    def getNumTopFeatures(self): ...
    def setPercentile(self, value): ...
    def getPercentile(self): ...
    def setFpr(self, value): ...
    def getFpr(self): ...

class ChiSqSelectorModel(JavaModel, JavaMLReadable, JavaMLWritable):
    @property
    def selectedFeatures(self): ...
