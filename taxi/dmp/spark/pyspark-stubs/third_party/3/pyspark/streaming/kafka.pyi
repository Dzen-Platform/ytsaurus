# Stubs for pyspark.streaming.kafka (Python 3.5)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any, Optional
from pyspark.rdd import RDD
from pyspark.streaming import DStream
from pyspark.streaming.dstream import TransformedDStream

def utf8_decoder(s): ...

class KafkaUtils:
    @staticmethod
    def createStream(ssc, zkQuorum, groupId, topics, kafkaParams: Optional[Any] = ..., storageLevel: Any = ..., keyDecoder: Any = ..., valueDecoder: Any = ...): ...
    @staticmethod
    def createDirectStream(ssc, topics, kafkaParams, fromOffsets: Optional[Any] = ..., keyDecoder: Any = ..., valueDecoder: Any = ..., messageHandler: Optional[Any] = ...): ...
    @staticmethod
    def createRDD(sc, kafkaParams, offsetRanges, leaders: Optional[Any] = ..., keyDecoder: Any = ..., valueDecoder: Any = ..., messageHandler: Optional[Any] = ...): ...

class OffsetRange:
    topic = ...  # type: Any
    partition = ...  # type: Any
    fromOffset = ...  # type: Any
    untilOffset = ...  # type: Any
    def __init__(self, topic, partition, fromOffset, untilOffset) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...

class TopicAndPartition:
    def __init__(self, topic, partition) -> None: ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __hash__(self): ...

class Broker:
    def __init__(self, host, port) -> None: ...

class KafkaRDD(RDD):
    def __init__(self, jrdd, ctx, jrdd_deserializer) -> None: ...
    def offsetRanges(self): ...

class KafkaDStream(DStream):
    def __init__(self, jdstream, ssc, jrdd_deserializer) -> None: ...
    def foreachRDD(self, func): ...
    def transform(self, func): ...

class KafkaTransformedDStream(TransformedDStream):
    def __init__(self, prev, func) -> None: ...

class KafkaMessageAndMetadata:
    topic = ...  # type: Any
    partition = ...  # type: Any
    offset = ...  # type: Any
    def __init__(self, topic, partition, offset, key, message) -> None: ...
    def __reduce__(self): ...
    @property
    def key(self): ...
    @property
    def message(self): ...
