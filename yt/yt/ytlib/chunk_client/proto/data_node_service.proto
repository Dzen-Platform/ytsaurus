package NYT.NChunkClient.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/core/misc/proto/error.proto";
import "yt_proto/yt/client/misc/proto/workload.proto";
import "yt_proto/yt/client/node_tracker_client/proto/node.proto";
import "yt/ytlib/chunk_client/proto/block_id.proto";
import "yt/ytlib/chunk_client/proto/chunk_info.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_meta.proto";
import "yt/ytlib/chunk_client/proto/chunk_reader_statistics.proto";
import "yt/ytlib/chunk_client/proto/chunk_slice.proto";
import "yt/ytlib/chunk_client/proto/session_id.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";
import "yt_proto/yt/client/table_chunk_format/proto/wire_protocol.proto";

////////////////////////////////////////////////////////////////////////////////

message TPeerDescriptor
{
    // AllBlocksIndex means that the whole chunk is likely to be present
    // at these nodes.
    required int32 block_index = 1;
    repeated int32 node_ids = 3;

    reserved 2;
}

////////////////////////////////////////////////////////////////////////////////

message TReqStartChunk
{
    required TSessionId session_id = 7;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 2;
    optional bool sync_on_close = 3 [default = true];
    optional bool enable_direct_io = 8 [default = false];
    optional bool enable_multiplexing = 4 [default = false];
    optional NYT.NProto.TGuid placement_id = 6;
}

message TRspStartChunk
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqFinishChunk
{
    required TSessionId session_id = 4;
    optional TChunkMeta chunk_meta = 2;
    optional int32 block_count = 3;
}

message TRspFinishChunk
{
    required TChunkInfo chunk_info = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqCancelChunk
{
    required TSessionId session_id = 2;
}

message TRspCancelChunk
{ }

////////////////////////////////////////////////////////////////////////////////

//! Used in replication writer.
message TReqPutBlocks
{
    required TSessionId session_id = 7;
    required int32 first_block_index = 2;
    optional bool populate_cache = 5 [default = false];
    optional bool flush_blocks = 6 [default = false];

    // Might be empty, or contain NullChecksum.
    repeated fixed64 block_checksums = 8;
}

message TRspPutBlocks
{
    optional bool close_demanded = 1 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

//! Used in replication writer when asking one node to send data to another node.
message TReqSendBlocks
{
    required TSessionId session_id = 5;
    required NYT.NNodeTrackerClient.NProto.TNodeDescriptor target_descriptor = 2;
    required int32 first_block_index = 3;
    required int32 block_count = 4;
}

message TRspSendBlocks
{
    optional bool close_demanded = 1 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

message TReqFlushBlocks
{
    required TSessionId session_id = 3;
    required int32 block_index = 2;
}

message TRspFlushBlocks
{
    optional bool close_demanded = 1 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

// This request is used to distribute blocks around the cluster by TP2PBlockDistributor.
// Blocks are sent as attachments. If node accepts to put blocks in her cache
// (currently node does not have an option to decline), it responds with an expiration deadline,
// such that the originator node can mention her as a peer within this time (cf. TBlockPeerUpdater).

message TReqPopulateCache
{
    message TBlock
    {
        required TBlockId block_id = 1;
        optional NYT.NNodeTrackerClient.NProto.TNodeDescriptor source_descriptor = 2;
    }
    repeated TBlock blocks = 1;
    repeated fixed64 block_checksums = 2;
}

message TRspPopulateCache
{
    required uint64 expiration_deadline = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqProbeChunkSet
{
    repeated NYT.NProto.TGuid chunk_ids = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
}

message TRspProbeChunkSet
{
    message TSubresponse
    {
        required bool has_complete_chunk = 1;
        repeated int32 peer_node_ids = 2;

        required bool disk_throttling = 3;
        required int64 disk_queue_size = 4;
    }

    required bool net_throttling = 1;
    required int64 net_queue_size = 2;

    repeated TSubresponse subresponses = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TReqProbeBlockSet
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated int32 block_indexes = 2;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
}

message TRspProbeBlockSet
{
    repeated TPeerDescriptor peer_descriptors = 1;
    required bool has_complete_chunk = 2;
    required bool net_throttling = 3;
    required int64 net_queue_size = 4;
    required bool disk_throttling = 5;
    required int64 disk_queue_size = 6;
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetBlockSet
{
    required NYT.NProto.TGuid chunk_id = 1;
    repeated int32 block_indexes = 2;
    optional uint64 peer_expiration_deadline = 4;
    optional bool populate_cache = 5 [default = true];
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 6;
    // COMPAT(babenko): drop once all clusters support ProbeBlockSet
    optional bool fetch_from_cache = 7 [default = true];
    // COMPAT(babenko): drop once all clusters support ProbeBlockSet
    optional bool fetch_from_disk = 8 [default = true];
    optional int32 peer_node_id = 9;

    reserved 3;
}

message TRspGetBlockSet
{
    repeated TPeerDescriptor peer_descriptors = 1;
    required bool has_complete_chunk = 3;
    required bool net_throttling = 5;
    required int64 net_queue_size = 6;
    required bool disk_throttling = 7;
    required int64 disk_queue_size = 8;
    optional TChunkReaderStatistics chunk_reader_statistics = 10;
    repeated fixed64 block_checksums = 9;

    // Blocks are returned via attachments and correspond to block_indexes
    // list in the request. Some blocks may be null.
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetBlockRange
{
    required NYT.NProto.TGuid chunk_id = 1;
    required int32 first_block_index = 2;
    required int32 block_count = 3;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 4;
    optional bool populate_cache = 5 [default = true];
}

message TRspGetBlockRange
{
    required bool has_complete_chunk = 1;
    required bool net_throttling = 3;
    required int64 net_queue_size = 4;
    required bool disk_throttling = 5;
    required int64 disk_queue_size = 6;
    optional TChunkReaderStatistics chunk_reader_statistics = 8;
    repeated fixed64 block_checksums = 7;

    // Blocks are returned via attachments and correspond to a prefix of
    // the requested range.
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetChunkFragmentSet
{
    required NYT.NProto.TGuid read_session_id = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 2;

    message TSubrequest
    {
        required NYT.NProto.TGuid chunk_id = 1;

        message TFragment
        {
            // Chunk-wise offset.
            required int64 offset = 1;
            // Length of the fragment.
            required int32 length = 2;
        }

        repeated TFragment fragments = 2;
    }

    repeated TSubrequest subrequests = 3;
}

message TRspGetChunkFragmentSet
{
    message TSubresponse
    {
        required bool has_complete_chunk = 1;
        repeated TPeerDescriptor peer_descriptors = 3;
    }

    repeated TSubresponse subresponses = 1;

    optional TChunkReaderStatistics chunk_reader_statistics = 2;

    // Block fragments are returned via attachments and correspond to the flattened list
    // of all fragment subrequests. Some attachments can be null (if the requested chunk is missing
    // or a node is unable to complete the request due to throttling).
    // No checksums are validated by the node (since there could be no checksums for arbitrary block fragments).
    // Readers are encouraged to run consistency checks on their own (e.g. embed checksums into block fragments).
}

////////////////////////////////////////////////////////////////////////////////

message TReqLookupRows
{
    message TTableSchemaData
    {
        required NYT.NProto.TGuid table_id = 1;
        required uint64 revision = 2;
        optional int64 schema_size = 3;
        optional NTableClient.NProto.TTableSchemaExt schema = 8;
    }

    required NYT.NProto.TGuid chunk_id = 1;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
    required NYT.NProto.TGuid read_session_id = 4;
    required bool produce_all_versions = 5;
    optional NTableClient.NProto.TColumnFilter column_filter = 7;
    optional uint64 timestamp = 8;
    optional int32 compression_codec = 9;
    optional uint64 chunk_timestamp = 10;
    required TTableSchemaData schema_data = 6;

    // COMPAT(akozhikhov): Make these fields required.
    optional bool populate_cache = 11 [default = true];
    optional bool reject_if_throttling = 12 [default = false];

    // Lookup keys are passed via attachments.
}

message TRspLookupRows
{
    // Found rows are returned via attachment.
    required bool fetched_rows = 1;
    optional bool request_schema = 2;
    optional bool rejected_due_to_throttling = 8 [default = false];

    optional TChunkReaderStatistics chunk_reader_statistics = 3;

    optional bool net_throttling = 4 [default = false];
    optional bool disk_throttling = 5 [default = false];

    optional int64 net_queue_size = 6 [default = 0];
    optional int64 disk_queue_size = 7 [default = 0];
}

////////////////////////////////////////////////////////////////////////////////

message TReqPingSession
{
    required TSessionId session_id = 2;
}

message TRspPingSession
{
    optional bool close_demanded = 1 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

message TReqGetChunkMeta
{
    required NYT.NProto.TGuid chunk_id = 1;
    optional int32 medium_index = 7;
    repeated int32 extension_tags = 2;
    // If true, then extension_tags are ignored and
    // the whole available meta is returned.
    optional bool all_extension_tags = 3 [default = false];
    optional int32 partition_tag = 4;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 5;

    // COMPAT(psushin).
    optional bool enable_throttling = 6 [default = false];

    // Bitmask of the chunk features that are supported by client.
    // If requested chunk uses features that are not supported by client,
    // an error is returned.
    optional uint64 supported_chunk_features = 8;
}

message TRspGetChunkMeta
{
    optional TChunkMeta chunk_meta = 1;
    optional bool net_throttling = 2 [default = false];
    optional TChunkReaderStatistics chunk_reader_statistics = 3;
    optional NYT.NProto.TGuid location_uuid = 4;
}

////////////////////////////////////////////////////////////////////////////////

message TReqUpdatePeer
{
    reserved 2;
    repeated TBlockId block_ids = 1;
    required uint64 peer_expiration_deadline = 3;
    required int32 peer_node_id = 4;
}

message TRspUpdatePeer
{ }

////////////////////////////////////////////////////////////////////////////////

message TReqGetTableSamples
{
    message TSampleRequest
    {
        required NYT.NProto.TGuid chunk_id = 1;
        required int32 sample_count = 2;
        optional bytes lower_key = 3;
        optional bytes upper_key = 4;
    }

    repeated TSampleRequest sample_requests = 1;
    repeated string key_columns = 2;
    required int32 max_sample_size = 3;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 4;
    required int32 sampling_policy = 5; // ESamplingPolicy

    reserved 6;
}

message TRspGetTableSamples
{
    message TSample
    {
        required bool incomplete = 2;
        required int64 weight = 3;
        required int32 key_index = 4;

        reserved 1;
    }

    message TChunkSamples
    {
        optional NYT.NProto.TError error = 1;
        repeated TSample samples = 3;

        reserved 2;
    }

    repeated TChunkSamples sample_responses = 1;

    reserved 2;
}

////////////////////////////////////////////////////////////////////////////////

// For sorted chunks only.
// Scheduler calls this method to perform sorted merge, reduce, join, etc.
message TReqGetChunkSlices
{
    repeated TSliceRequest slice_requests = 1;

    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 5;

    reserved 2, 3, 4, 6, 7;
}

message TRspGetChunkSlices
{
    message TSliceResponse
    {
        optional NYT.NProto.TError error = 1;
        repeated TChunkSlice chunk_slices = 3;

        reserved 2;
    }

    repeated TSliceResponse slice_responses = 1;

    reserved 2;
}

////////////////////////////////////////////////////////////////////////////////

// Scheduler calls this method to get a better estimation for input data weight.
// Such information is also exposed to a client via an API method.
message TReqGetColumnarStatistics
{
    required NYT.NTableClient.NProto.TNameTableExt name_table = 1;
    message TSubrequest
    {
        required NYT.NProto.TGuid chunk_id = 1;
        repeated int32 column_ids = 2;
    }

    repeated TSubrequest subrequests = 2;
    required NYT.NProto.TWorkloadDescriptor workload_descriptor = 3;
}

message TRspGetColumnarStatistics
{
    message TSubresponse
    {
        optional NYT.NProto.TError error = 1;
        repeated int64 data_weights = 2;
        optional int64 timestamp_total_weight = 3;
    }

    repeated TSubresponse subresponses = 1;
}

////////////////////////////////////////////////////////////////////////////////
