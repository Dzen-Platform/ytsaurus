package NYT.NJobTrackerClient.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt/ytlib/job_tracker_client/proto/job.proto";
import "yt_proto/yt/client/node_tracker_client/proto/node.proto";

////////////////////////////////////////////////////////////////////////////////

// Informs Job Tracker about node status and requests orders.

message TReqHeartbeat
{
    required int32 node_id = 1;
    required NNodeTrackerClient.NProto.TNodeDescriptor node_descriptor = 2;
    required NNodeTrackerClient.NProto.TNodeResources resource_usage = 3;
    required NNodeTrackerClient.NProto.TNodeResources resource_limits = 4;
    repeated TJobStatus jobs = 5;
    repeated NYT.NProto.TGuid unconfirmed_jobs = 6;
    required int64 confirmed_job_count = 7;
    required NNodeTrackerClient.NProto.TDiskResources disk_resources = 8;
    optional int32 job_reporter_write_failures_count = 9;
    optional bool job_reporter_queue_is_too_large = 10;
}

message TControllerAgentDescriptor
{
    required NYT.NProto.TGuid incarnation_id = 1;
    required NNodeTrackerClient.NProto.TAddressMap addresses = 2;
}

message TJobStartInfo
{
    required NYT.NProto.TGuid job_id = 1;
    optional NYT.NProto.TGuid operation_id = 2;
    // Resource limits as predicted by the controller.
    required NNodeTrackerClient.NProto.TNodeResources resource_limits = 3;

    optional NNodeTrackerClient.NProto.TAddressMap spec_service_addresses = 4; // COMPAT
    optional TControllerAgentDescriptor controller_agent_descriptor = 5;
}

message TJobToAbort
{
    required NYT.NProto.TGuid job_id = 1;
    optional int32 abort_reason = 2;
    optional string preemption_reason = 3;
}

message TJobToRemove
{
    required NYT.NProto.TGuid job_id = 1;
    required bool archive_job_spec = 2; // COMPAT
    optional bool archive_stderr = 3; // COMPAT
    optional bool archive_fail_context = 4; // COMPAT
    optional bool archive_profile = 5; // COMPAT
    optional TReleaseJobFlags release_job_flags = 6;
}

message TJobsToConfirm
{
    required TControllerAgentDescriptor controller_agent_descriptor = 1;
    required NYT.NProto.TGuid job_id = 2;
}

message TRspHeartbeat
{
    repeated TJobStartInfo jobs_to_start = 1;
    repeated NYT.NProto.TGuid old_jobs_to_abort = 2; // COMPAT
    repeated TJobToAbort jobs_to_abort = 15;
    repeated TJobToRemove jobs_to_remove = 3;
    repeated NYT.NProto.TGuid jobs_to_store = 4;
    repeated NYT.NProto.TGuid jobs_to_interrupt = 5;
    repeated NYT.NProto.TGuid jobs_to_fail = 6;
    // Ids of jobs that should be included in the next heartbeat even if they are stored.
    repeated NYT.NProto.TGuid old_jobs_to_confirm = 7; // COMPAT
    repeated TJobsToConfirm jobs_to_confirm = 16;
    optional bool scheduling_skipped = 8;
    optional bool enable_job_reporter = 9;
    optional bool enable_job_spec_reporter = 10;
    optional int32 operation_archive_version = 11;
    optional bool enable_job_stderr_reporter = 12;
    optional bool enable_job_fail_context_reporter = 13;
    optional bool enable_job_profile_reporter = 14;
}

////////////////////////////////////////////////////////////////////////////////

