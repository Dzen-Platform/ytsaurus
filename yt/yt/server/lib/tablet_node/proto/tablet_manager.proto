package NYT.NTabletNode.NProto;

import "yt_proto/yt/core/misc/proto/guid.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_meta.proto";
import "yt_proto/yt/client/chunk_client/proto/chunk_view.proto";
import "yt/ytlib/tablet_client/proto/heartbeat.proto";

////////////////////////////////////////////////////////////////////////////////

message TAddStoreDescriptor
{
    required int32 store_type = 1; // EStoreType
    required NYT.NProto.TGuid store_id = 2;
    required NYT.NChunkClient.NProto.TChunkMeta chunk_meta = 3;
    optional NYT.NProto.TGuid backing_store_id = 4;
    optional int64 starting_row_index = 5;
    optional NYT.NChunkClient.NProto.TChunkViewDescriptor chunk_view_descriptor = 6;
}

message TRemoveStoreDescriptor
{
    required NYT.NProto.TGuid store_id = 1;
}

message TAddHunkChunkDescriptor
{
    required NYT.NProto.TGuid chunk_id = 1;
    required NYT.NChunkClient.NProto.TChunkMeta chunk_meta = 2;
}

message TRemoveHunkChunkDescriptor
{
    required NYT.NProto.TGuid chunk_id = 1;
}

message TTableReplicaDescriptor
{
    required NYT.NProto.TGuid replica_id = 1;
    required string cluster_name = 2;
    required string replica_path = 3;
    required uint64 start_replication_timestamp = 4;
    required NYT.NTabletClient.NProto.TTableReplicaStatistics statistics = 5;
    required int32 mode = 6; // ETableReplicaMode
    optional bool preserve_timestamps = 7;
    optional int32 atomicity = 8; // EAtomicity
}

message TLockDescriptor
{
    required NYT.NProto.TGuid transaction_id = 1;
    required uint64 timestamp = 2;
}

message TMountHint
{
    repeated NYT.NProto.TGuid eden_store_ids = 1;
}

message TTableSettings
{
    required bytes mount_config = 1; // YSON-serialized
    required bytes store_reader_config = 2; // YSON-serialized
    required bytes hunk_reader_config = 3; // YSON-serialized
    required bytes store_writer_config = 4; // YSON-serialized
    required bytes store_writer_options = 5; // YSON-serialized
    required bytes hunk_writer_config = 6; // YSON-serialized
    required bytes hunk_writer_options = 7; // YSON-serialized
}

message TReqMountTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid table_id = 9;
    required NYT.NTableClient.NProto.TTableSchemaExt schema = 2;
    optional NYT.NProto.TGuid schema_id = 26;
    repeated TAddStoreDescriptor stores = 4;
    repeated TAddHunkChunkDescriptor hunk_chunks = 24;
    optional bytes pivot_key = 5;
    optional bytes next_pivot_key = 6;
    // COMPAT(babenko)
    required bytes mount_config = 7; // YSON-serialized
    // COMPAT(babenko)
    required bytes store_reader_config = 16; // YSON-serialized
    // COMPAT(babenko)
    required bytes store_writer_config = 17; // YSON-serialized
    // COMPAT(babenko)
    required bytes store_writer_options = 8; // YSON-serialized
    optional TTableSettings table_settings = 25;
    required int32 atomicity = 10; // EAtomicity
    required int32 commit_ordering = 15; // ECommitOrdering
    required uint64 mount_revision = 11;
    required int64 trimmed_row_count = 12;
    required bool freeze = 13;
    repeated TTableReplicaDescriptor replicas = 14;
    optional NYT.NProto.TGuid upstream_replica_id = 18;
    optional string path = 19;
    repeated TLockDescriptor locks = 20;
    optional uint64 retained_timestamp = 21;
    repeated NYT.NProto.TGuid dynamic_store_ids = 22;
    optional TMountHint mount_hint = 23;
}

message TReqUnmountTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    required bool force = 2;
}

message TReqRemountTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    // COMPAT(babenko)
    required bytes mount_config = 7; // YSON-serialized
    // COMPAT(babenko)
    required bytes store_reader_config = 9; // YSON-serialized
    // COMPAT(babenko)
    required bytes store_writer_config = 10; // YSON-serialized
    // COMPAT(babenko)
    required bytes store_writer_options = 8; // YSON-serialized
    optional TTableSettings table_settings = 11;
}

message TReqFreezeTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
}

message TReqUnfreezeTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    repeated NYT.NProto.TGuid dynamic_store_ids = 2;
}

message TReqReportTabletLocked
{
    required NYT.NProto.TGuid tablet_id = 1;
}

message TReqLockTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    required TLockDescriptor lock = 2;
}

message TReqUnlockTablet
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid transaction_id = 2;
    required uint64 mount_revision = 3;
    repeated NTabletNode.NProto.TAddStoreDescriptor stores_to_add = 4;
    optional int32 update_mode = 5 [default = 1]; // EUpdateMode [default = Append]
    optional int64 commit_timestamp = 6;

    // For overwrite mode.
    repeated NYT.NProto.TGuid dynamic_store_ids = 7;
}

message TReqSetTabletState
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 3;
    required int32 state = 2;
}

message TReqWriteRows
{
    required NYT.NProto.TGuid transaction_id = 1;
    optional uint64 transaction_start_timestamp = 2;
    optional int64 transaction_timeout = 3;
    required NYT.NProto.TGuid tablet_id = 4;
    required uint64 mount_revision = 6;
    required int32 codec = 7;
    required bytes compressed_data = 8;
    optional uint32 signature = 9;
    optional uint32 generation = 16;
    required bool lockless = 10;
    required int32 row_count = 11;
    repeated NYT.NProto.TGuid sync_replica_ids = 12;
    optional int64 data_weight = 13;
    optional string user = 14;
    optional string user_tag = 15;
}

message TReqTrimRows
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    required int64 trimmed_row_count = 3;
    optional string user = 4;
    optional string user_tag = 5;
}

message TReqRotateStore
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 2;
    optional int32 reason = 3; // EStoreRotationReason
}

message TReqSplitPartition
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 4;
    required NYT.NProto.TGuid partition_id = 2;
    repeated bytes pivot_keys = 3;
}

message TReqMergePartitions
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 4;
    required NYT.NProto.TGuid partition_id = 2;
    required int32 partition_count = 3;
}

message TReqUpdatePartitionSampleKeys
{
    required NYT.NProto.TGuid tablet_id = 1;
    required uint64 mount_revision = 5;
    required NYT.NProto.TGuid partition_id = 4;
    required bytes sample_keys = 6; // wire-format encoded
}

message TReqAddTableReplica
{
    required NYT.NProto.TGuid tablet_id = 1;
    required TTableReplicaDescriptor replica = 2;
}

message TReqRemoveTableReplica
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
}

// COMPAT(babenko): replace in favor of TReqAlterTableReplica
message TReqSetTableReplicaEnabled
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
    required bool enabled = 3;
}

message TReqAlterTableReplica
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
    optional bool enabled = 3;
    optional int32 mode = 4; // ETableReplicaMode
    optional bool preserve_timestamps = 5;
    optional int32 atomicity = 6; // EAtomicity
}

message TReqReplicateRows
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid replica_id = 2;
    optional int64 prev_replication_row_index = 5;
    required int64 new_replication_row_index = 3;
    required uint64 new_replication_timestamp = 4;
}

message TReqOnTabletCellDecommissioned
{ }

message TRspAllocateDynamicStore
{
    required NYT.NProto.TGuid tablet_id = 1;
    required NYT.NProto.TGuid dynamic_store_id = 2;
    required uint64 mount_revision = 3;
}

////////////////////////////////////////////////////////////////////////////////

