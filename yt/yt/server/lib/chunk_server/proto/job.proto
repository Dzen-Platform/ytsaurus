package NYT.NChunkClient.NProto;

import "yt/ytlib/chunk_client/proto/chunk_service.proto";

import "yt/ytlib/job_tracker_client/proto/job.proto";

import "yt_proto/yt/core/misc/proto/guid.proto";

import "yt_proto/yt/client/node_tracker_client/proto/node_directory.proto";
import "yt_proto/yt/client/table_chunk_format/proto/chunk_meta.proto";

////////////////////////////////////////////////////////////////////////////////

message TReplicateChunkJobSpecExt
{
    extend NJobTrackerClient.NProto.TJobSpec
    {
        optional TReplicateChunkJobSpecExt replicate_chunk_job_spec_ext = 201;
    }

    reserved 5;

    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 1;

    // Encoded chunk id.
    required NYT.NProto.TGuid chunk_id = 3;

    // Medium where the chunk replica resides.
    required int32 source_medium_index = 4;

    // Nodes where new replicas must be created.
    // Replica indexes are not used.
    // Medium indexes indicate destination medium.
    repeated fixed64 target_replicas = 6;
}

message TRemoveChunkJobSpecExt
{
    extend NJobTrackerClient.NProto.TJobSpec
    {
        optional TRemoveChunkJobSpecExt remove_chunk_job_spec_ext = 204;
    }

    // Encoded chunk id.
    required NYT.NProto.TGuid chunk_id = 1;

    // Medium where the chunk replica resides.
    required int32 medium_index = 2;

    // All known stored chunk replicas (excluding the one being removed).
    repeated fixed32 replicas = 3;

    // Time to keep and suggest #replicas to others.
    optional uint64 replicas_expiration_deadline = 4;

    // If true and the chunk is actually missing at node, the job is considered successful
    // rather than failed.
    optional bool chunk_is_dead = 5;
}

message TRepairChunkJobSpecExt
{
    extend NJobTrackerClient.NProto.TJobSpec
    {
        optional TRepairChunkJobSpecExt repair_chunk_job_spec_ext = 202;
    }

    reserved 5;

    required int32 erasure_codec = 1;

    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 2;

    // Unencoded chunk id.
    required NYT.NProto.TGuid chunk_id = 3;

    // Nodes where existing replicas reside.
    // Replica indexes indicate specific chunk parts.
    // No medium indexes are provided (hence fixed32).
    repeated fixed32 source_replicas = 4;

    // Nodes where repaired replicas must be created.
    // Replica indexes indicate specific chunk parts to be repaired.
    // Medium indexes are same and indicate destination medium.
    repeated fixed64 target_replicas = 7;

    // True, if this repair job was scheduled as a part of node decommission.
    optional bool decommission = 6;

    // Only given for erasure journals.
    optional int64 row_count = 8;
}

message TSealChunkJobSpecExt
{
    extend NJobTrackerClient.NProto.TJobSpec
    {
        optional TSealChunkJobSpecExt seal_chunk_job_spec_ext = 203;
    }

    // The final number of rows this chunk must have.
    required int64 row_count = 1;

    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 2;

    // Unencoded chunk id.
    required NYT.NProto.TGuid chunk_id = 3;

    // Erasure codec.
    optional int32 codec_id = 6; // NErasure::ECodec

    // Medium where the chunk replica resides.
    required int32 medium_index = 4;

    // Nodes where existing replicas reside.
    // Replica indexes are not used.
    // No medium indexes are provided (hence fixed32).
    repeated fixed32 source_replicas = 5;
}

message TMergeChunkInfo
{
    required NYT.NProto.TGuid id = 1;

    // Nodes where existing replicas reside.
    // Replica indexes are not used.
    // No medium indexes are provided (hence fixed32).
    repeated fixed32 source_replicas = 2;
    optional int64 row_count = 3 [default = 0];
    optional int32 erasure_codec = 4 [default = 0]; // NErasure::ECodec
}

message TChunkMergerWriterOptions
{
    optional NYT.NTableClient.NProto.TTableSchemaExt schema = 1;
    required int32 compression_codec = 2; // NCompression::ECodec
    optional int32 optimize_for = 3; // EOptimizeFor
    optional bool enable_skynet_sharing = 4;
    optional int32 erasure_codec = 5 [default = 0]; // NErasure::ECodec
    optional int32 merge_mode = 6 [default = 2]; // NChunkClient::EChunkMergerMode, default is EChunkMergerMode::Deep
    optional int32 max_heavy_columns = 7 [default = 0];
    optional int64 max_block_count = 8;
}

message TMergeChunksJobSpecExt
{
    extend NJobTrackerClient.NProto.TJobSpec
    {
        optional TMergeChunksJobSpecExt merge_chunks_job_spec_ext = 208;
    }

    required int32 cell_tag = 1;
    repeated TMergeChunkInfo input_chunks = 2;
    required NYT.NProto.TGuid output_chunk_id = 3;
    required int32 medium_index = 4;
    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 5;
    required TChunkMergerWriterOptions chunk_merger_writer_options = 6;
    repeated fixed64 target_replicas = 7;
}

message TAutotomizeChunkJobSpecExt
{
    extend NJobTrackerClient.NProto.TJobSpec
    {
        optional TAutotomizeChunkJobSpecExt autotomize_chunk_job_spec_ext = 209;
    }

    // Body chunk.
    required NYT.NProto.TGuid body_chunk_id = 1;
    required int64 body_chunk_first_overlayed_row_index = 2;
    repeated fixed64 body_chunk_replicas = 3;
    required int64 body_chunk_replica_lag_limit = 4;

    // Tail chunk.
    required NYT.NProto.TGuid tail_chunk_id = 5;

    // Journal parameters.
    required int32 read_quorum = 6;
    required int32 write_quorum = 7;
    required int32 medium_index = 8;
    required int32 erasure_codec = 9; // NErasure::ECodec
    required int32 replication_factor = 10;
    required bool overlayed = 11;
    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 12;
}

message TAutotomizeChunkJobResultExt
{
    extend NJobTrackerClient.NProto.TJobResult
    {
        optional TAutotomizeChunkJobResultExt autotomize_chunk_job_result_ext = 201;
    }

    required NYT.NProto.TGuid body_chunk_id = 1;
    required NYT.NChunkClient.NProto.TChunkSealInfo body_chunk_seal_info = 2;
    required NYT.NProto.TGuid tail_chunk_id = 3;
    required NYT.NChunkClient.NProto.TChunkSealInfo tail_chunk_seal_info = 4;
}

////////////////////////////////////////////////////////////////////////////////
