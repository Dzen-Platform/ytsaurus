#!/usr/bin/env python3

import sys

from yt.wrapper.admin_commands import add_switch_leader_parser

from yt.wrapper.cli_helpers import ParseStructuredArgument
from yt.wrapper.native_driver import get_driver_instance
import yt.wrapper as yt

from argparse import ArgumentParser


def build_snapshot(*args, **kwargs):
    print(get_driver_instance(None).build_snapshot(*args, **kwargs))


def build_master_snapshots(*args, **kwargs):
    print(get_driver_instance(None).build_master_snapshots(*args, **kwargs))


def gc_collect(*args, **kwargs):
    get_driver_instance(None).gc_collect(*args, **kwargs)


def kill_process(*args, **kwargs):
    print('NB: If process has actually been killed, there should be a "Socket was closed" below.\n',
          file=sys.stderr)
    get_driver_instance(None).kill_process(*args, **kwargs)


def write_core_dump(*args, **kwargs):
    print(get_driver_instance(None).write_core_dump(*args, **kwargs))


def write_operation_controller_core_dump(*args, **kwargs):
    print(get_driver_instance(None).write_operation_controller_core_dump(*args, **kwargs))


def clear_metadata_caches(*args, **kwargs):
    get_driver_instance(None).clear_metadata_caches(*args, **kwargs)


def main():
    config_parser = ArgumentParser(add_help=False)
    config_parser.add_argument("--config", action=ParseStructuredArgument, help="specify configuration", default={})
    config_parser.add_argument("--proxy", help="specify cluster to run command, "
                                               "by default we expect that --config is specified")

    parser = ArgumentParser(
        parents=[config_parser],
        description="Script to run some administer stuff directly through driver")

    subparsers = parser.add_subparsers(metavar="command")
    subparsers.required = True

    build_snapshot_parser = subparsers.add_parser(
        "build-snapshot",
        help="Build snapshot for a given cell (either master or tablet)")
    build_snapshot_parser.set_defaults(func=build_snapshot)
    set_read_only_action = build_snapshot_parser.add_mutually_exclusive_group(required=True)
    set_read_only_action.add_argument("--read-only", action="store_true")
    set_read_only_action.add_argument("--no-read-only", action="store_true")
    build_snapshot_parser.add_argument("--wait-for-snapshot-completion", action="store_true", default=False)
    build_snapshot_parser.add_argument("--cell-id", required=True)

    build_master_snapshot_parser = subparsers.add_parser("build-master-snapshots",
                                                         help="Build snapshots for all master cells")
    build_master_snapshot_parser.set_defaults(func=build_master_snapshots)
    set_read_only_action = build_master_snapshot_parser.add_mutually_exclusive_group(required=True)
    set_read_only_action.add_argument("--read-only", action="store_true")
    set_read_only_action.add_argument("--no-read-only", action="store_true")
    build_master_snapshot_parser.add_argument("--wait-for-snapshot-completion", action="store_true", default=False)
    build_master_snapshot_parser.add_argument("--retry", action="store_true", default=True)

    add_switch_leader_parser(subparsers)

    gc_collect_parser = subparsers.add_parser("gc-collect", help="Run garbage collection at master")
    gc_collect_parser.set_defaults(func=gc_collect)

    kill_process_parser = subparsers.add_parser(
        "kill-process",
        help="Force any remote YT service process listening at a given address to exit immediately. "
             "Use with care. This command always finishes with an error")
    kill_process_parser.add_argument("address")
    kill_process_parser.set_defaults(func=kill_process)

    write_core_dump_parser = subparsers.add_parser(
        "write-core-dump",
        help="Make remote YT process (node, scheduler or master) write a run-time "
             "core dump. This (presumably) does not affect the state of the process.")
    write_core_dump_parser.add_argument("address")
    write_core_dump_parser.set_defaults(func=write_core_dump)

    write_operation_controller_core_dump_parser = subparsers.add_parser(
        "write-operation-controller-core-dump",
        help="Make operation controller write a run-time core dump. "
             "This (presumably) does not affect the state of the process.")
    write_operation_controller_core_dump_parser.add_argument("operation_id")
    write_operation_controller_core_dump_parser.set_defaults(func=write_operation_controller_core_dump)

    clear_metadata_caches_parser = subparsers.add_parser("clear-caches", help="Clear metadata caches")
    clear_metadata_caches_parser.set_defaults(func=clear_metadata_caches)

    config_args, unparsed = config_parser.parse_known_args()
    if config_args.proxy is not None:
        yt.config["backend"] = "http"
        yt.config["proxy"]["url"] = config_args.proxy
    else:
        yt.config["backend"] = "native"
        yt.config.update_config(config_args.config)

    args = parser.parse_args(unparsed)
    func_args = dict(vars(args))
    func_args.pop("func")
    func_args.pop("config")
    func_args.pop("proxy")
    args.func(**func_args)


if __name__ == "__main__":
    main()
