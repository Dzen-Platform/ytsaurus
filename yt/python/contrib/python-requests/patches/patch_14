From 12d93ccbf1217e6a294ff2ac92853b5ace7e9990 Mon Sep 17 00:00:00 2001
From: Alexey Filinovich <aleexfi@yandex-team.ru>
Date: Fri, 16 Sep 2022 17:16:28 +0300
Subject: [PATCH] Fix imports

---
 requests/__init__.py | 34 +++++++++++++++++++++++++---------
 requests/adapters.py | 15 ++++++++++++---
 requests/compat.py   | 17 +++++++++++++----
 requests/help.py     | 28 ++++++++++++++++++----------
 requests/packages.py | 40 ++++++++++++++++++++++++----------------
 5 files changed, 92 insertions(+), 42 deletions(-)

diff --git a/requests/__init__.py b/requests/__init__.py
index 9f0b00be..c5d1918c 100644
--- a/requests/__init__.py
+++ b/requests/__init__.py
@@ -40,19 +40,32 @@ is at <https://requests.readthedocs.io>.
 :license: Apache 2.0, see LICENSE for more details.
 """
 
-import urllib3
+try:
+    import yt.packages.urllib3 as urllib3
+except ImportError:
+    import urllib3
+import sys
 import warnings
 from .exceptions import RequestsDependencyWarning
 
-try:
-    from charset_normalizer import __version__ as charset_normalizer_version
-except ImportError:
+if sys.version_info >= (3, 6):
+    try:
+        from yt.packages.charset_normalizer import __version__ as charset_normalizer_version
+    except ImportError:
+        try:
+            from charset_normalizer import __version__ as charset_normalizer_version
+        except ImportError:
+            charset_normalizer_version = None
+else:
     charset_normalizer_version = None
 
 try:
-    from chardet import __version__ as chardet_version
+    from yt.packages.chardet import __version__ as chardet_version
 except ImportError:
-    chardet_version = None
+    try:
+        from chardet import __version__ as chardet_version
+    except ImportError:
+        chardet_version = None
 
 def check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):
     urllib3_version = urllib3_version.split('.')
@@ -112,11 +125,11 @@ except (AssertionError, ValueError):
 #         import ssl
 #     except ImportError:
 #         ssl = None
-# 
+#
 #     if not getattr(ssl, "HAS_SNI", False):
 #         from urllib3.contrib import pyopenssl
 #         pyopenssl.inject_into_urllib3()
-# 
+#
 #         # NB: most of users have old cryptography and do not want to starve from this warning.
 #         # Check cryptography version
 #         # from cryptography import __version__ as cryptography_version
@@ -125,7 +138,10 @@ except (AssertionError, ValueError):
 #     pass
 
 # urllib3's DependencyWarnings should be silenced.
-from urllib3.exceptions import DependencyWarning
+try:
+    from yt.packages.urllib3.exceptions import DependencyWarning
+except ImportError:
+    from urllib3.exceptions import DependencyWarning
 warnings.simplefilter('ignore', DependencyWarning)
 
 from .__version__ import __title__, __description__, __url__, __version__
diff --git a/requests/adapters.py b/requests/adapters.py
index 6c78cc0f..1e0c7cc0 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -8,6 +8,7 @@ This module contains the transport adapters that Requests uses to define
 and maintain connections.
 """
 
+import sys
 import os.path
 import socket
 
@@ -60,11 +61,19 @@ from .exceptions import (ConnectionError, ConnectTimeout, ReadTimeout, SSLError,
                          InvalidURL, InvalidHeader)
 from .auth import _basic_auth_str
 
+def DummySOCKSProxyManager(*args, **kwargs):
+    raise InvalidSchema("Missing dependencies for SOCKS support.")
+
 try:
-    from urllib3.contrib.socks import SOCKSProxyManager
+    from yt.packages.urllib3.contrib.socks import SOCKSProxyManager
 except ImportError:
-    def SOCKSProxyManager(*args, **kwargs):
-        raise InvalidSchema("Missing dependencies for SOCKS support.")
+    if "yt.packages.urllib3" not in sys.modules:
+        try:
+            from urllib3.contrib.socks import SOCKSProxyManager
+        except ImportError:
+            SOCKSProxyManager = DummySOCKSProxyManager
+    else:
+        SOCKSProxyManager = DummySOCKSProxyManager
 
 DEFAULT_POOLBLOCK = False
 DEFAULT_POOLSIZE = 10
diff --git a/requests/compat.py b/requests/compat.py
index bcb7dcf7..10b2bcdb 100644
--- a/requests/compat.py
+++ b/requests/compat.py
@@ -8,12 +8,21 @@ This module handles import compatibility issues between Python 2 and
 Python 3.
 """
 
+import sys
+
 try:
-    import chardet
+    import yt.packages.chardet as chardet
 except ImportError:
-    import charset_normalizer as chardet
-
-import sys
+    try:
+        import chardet
+    except ImportError:
+        if sys.version_info >= (3, 6):
+            try:
+                import yt.packages.charset_normalizer as chardet
+            except ImportError:
+                import charset_normalizer as chardet
+        else:
+            raise
 
 # -------
 # Pythons
diff --git a/requests/help.py b/requests/help.py
index 33be0f5c..5c435fa7 100644
--- a/requests/help.py
+++ b/requests/help.py
@@ -18,24 +18,32 @@ except ImportError:
 from . import __version__ as requests_version
 
 try:
-    import charset_normalizer
+    import yt.packages.charset_normalizer as charset_normalizer
 except ImportError:
-    charset_normalizer = None
+    try:
+        import charset_normalizer
+    except ImportError:
+        charset_normalizer = None
 
 try:
-    import chardet
+    import yt.packages.chardet as chardet
 except ImportError:
-    chardet = None
+    try:
+        import chardet
+    except ImportError:
+        chardet = None
 
 try:
     from yt.packages.urllib3.contrib import pyopenssl
 except ImportError:
-    from urllib3.contrib import pyopenssl
-except ImportError:
-    pyopenssl = None
-    OpenSSL = None
-    cryptography = None
-else:
+    try:
+        from urllib3.contrib import pyopenssl
+    except ImportError:
+        pyopenssl = None
+        OpenSSL = None
+        cryptography = None
+
+if pyopenssl:
     import OpenSSL
     import cryptography
 
diff --git a/requests/packages.py b/requests/packages.py
index 00196bff..765b0e1f 100644
--- a/requests/packages.py
+++ b/requests/packages.py
@@ -1,26 +1,34 @@
 import sys
 
 try:
-    import chardet
+    import yt.packages.chardet as chardet
 except ImportError:
-    import charset_normalizer as chardet
-    import warnings
-
-    warnings.filterwarnings('ignore', 'Trying to detect', module='charset_normalizer')
+    try:
+        import chardet
+    except ImportError:
+        import warnings
+        warnings.filterwarnings('ignore', 'Trying to detect', module='charset_normalizer')
+        if sys.version_info >= (3, 6):
+            try:
+                import yt.packages.charset_normalizer as chardet
+            except ImportError:
+                import charset_normalizer as chardet
+        else:
+            raise
 
 # This code exists for backwards compatibility reasons.
 # I don't like it either. Just look the other way. :)
 
-for package in ('urllib3', 'idna'):
-    locals()[package] = __import__(package)
-    # This traversal is apparently necessary such that the identities are
-    # preserved (requests.packages.urllib3.* is urllib3.*)
-    for mod in list(sys.modules):
-        if mod == package or mod.startswith(package + '.'):
-            sys.modules['requests.packages.' + mod] = sys.modules[mod]
+# for package in ('urllib3', 'idna'):
+#     locals()[package] = __import__(package)
+#     # This traversal is apparently necessary such that the identities are
+#     # preserved (requests.packages.urllib3.* is urllib3.*)
+#     for mod in list(sys.modules):
+#         if mod == package or mod.startswith(package + '.'):
+#             sys.modules['requests.packages.' + mod] = sys.modules[mod]
 
-target = chardet.__name__
-for mod in list(sys.modules):
-    if mod == target or mod.startswith(target + '.'):
-        sys.modules['requests.packages.' + target.replace(target, 'chardet')] = sys.modules[mod]
+# target = chardet.__name__
+# for mod in list(sys.modules):
+#     if mod == target or mod.startswith(target + '.'):
+#         sys.modules['requests.packages.' + target.replace(target, 'chardet')] = sys.modules[mod]
 # Kinda cool, though, right?
-- 
2.17.1

