commit c64a747fda7df34d2d72eb93717cfd2a65c4b13f
Author: Ignat Kolesnichenko <ignat@yandex-team.ru>
Date:   Mon Sep 12 10:50:38 2022 +0300

    Better processing of exceptions

diff --git a/requests/adapters.py b/requests/adapters.py
index 1c543cf6..885849fb 100644
--- a/requests/adapters.py
+++ b/requests/adapters.py
@@ -519,7 +519,11 @@ class HTTPAdapter(BaseAdapter):
                     raise
 
         except (ProtocolError, socket.error) as err:
-            raise ConnectionError(err, request=request)
+            # NB: socket.error is OSError and it is base for ConnectionError
+            if isinstance(err, ConnectionError):
+                raise
+            else:
+                raise ConnectionError(err, request=request)
 
         except MaxRetryError as e:
             if isinstance(e.reason, ConnectTimeoutError):
diff --git a/requests/models.py b/requests/models.py
index 957a7ddd..b7dc45b9 100644
--- a/requests/models.py
+++ b/requests/models.py
@@ -32,7 +32,7 @@ from .cookies import cookiejar_from_dict, get_cookie_header, _copy_cookie_jar
 from .exceptions import (
     HTTPError, MissingSchema, InvalidURL, ChunkedEncodingError,
     ContentDecodingError, ConnectionError, StreamConsumedError,
-    InvalidJSONError)
+    InvalidJSONError, ReadTimeout)
 from .exceptions import JSONDecodeError as RequestsJSONDecodeError
 from ._internal_utils import to_native_string, unicode_is_ascii
 from .utils import (
@@ -46,6 +46,8 @@ from .compat import (
 from .compat import json as complexjson
 from .status_codes import codes
 
+from socket import timeout as SocketTimeout
+
 #: The set of HTTP status codes that indicate an automatically
 #: processable redirect.
 REDIRECT_STATI = (
@@ -771,10 +773,15 @@ class Response(object):
                     raise ContentDecodingError(e)
                 except ReadTimeoutError as e:
                     raise ConnectionError(e)
+                except (SocketTimeout, ReadTimeoutError) as e:
+                    raise ReadTimeout(e)
             else:
                 # Standard file-like object.
                 while True:
-                    chunk = self.raw.read(chunk_size)
+                    try:
+                        chunk = self.raw.read(chunk_size)
+                    except (SocketTimeout, ReadTimeoutError) as e:
+                        raise ReadTimeout(e)
                     if not chunk:
                         break
                     yield chunk
