package NYT.NChunkClient.NProto;

// Basic YPath RPC for all types of chunk list owners (tables and files).

import "yt/core/misc/guid.proto";
import "yt/core/ytree/attributes.proto";
import "yt/ytlib/node_tracker_client/node.proto";
import "yt/ytlib/chunk_client/chunk_meta.proto";
import "yt/ytlib/chunk_client/schema.proto";
import "yt/ytlib/chunk_client/chunk_spec.proto";

////////////////////////////////////////////////////////////////////////////////

// Branches the table returning the new root chunk list
// where all new chunks must be added to.
message TReqPrepareForUpdate
{
    required int32 update_mode = 1;
    required int32 lock_mode = 2;
    optional bool fetch_last_key = 3 [default = false];
}

message TRspPrepareForUpdate
{
    required NYT.NProto.TGuid chunk_list_id = 1;
    optional bytes last_key = 2;
}

////////////////////////////////////////////////////////////////////////////////

// Returns info describing a given portion of table.
message TReqFetch
{
    optional bool fetch_all_meta_extensions = 2 [default = false];

    // Not yet supported.
    repeated int32 extension_tags = 3;

    // Deprecated = 5;
    // Deprecated = 6;
    optional NChunkClient.NProto.TChannel channel = 7;
    // Deprecated = 8;
    // Deprecated = 9;

    optional bool fetch_parity_replicas = 10 [default = false];

    repeated TReadRange ranges = 11;
}

message TRspFetch
{
    required NYT.NNodeTrackerClient.NProto.TNodeDirectory node_directory = 1;
    repeated NChunkClient.NProto.TChunkSpec chunks = 2;
}

////////////////////////////////////////////////////////////////////////////////
