package NYT.NRpcProxy.NProto;

import "yt/core/rpc/rpc.proto";
import "yt/core/misc/guid.proto";

////////////////////////////////////////////////////////////////////////////////
// Authentication.
////////////////////////////////////////////////////////////////////////////////

message TCredentialsExt
{
    extend NRpc.NProto.TRequestHeader
    {
        optional TCredentialsExt credentials_ext = 110;
    }

    optional string userip = 1;
    optional string token = 2;
    optional string domain = 3;
    optional string sessionid = 4;
    optional string sslsessionid = 5;
}

////////////////////////////////////////////////////////////////////////////////
// Scalars.
////////////////////////////////////////////////////////////////////////////////

/*
Durations and serialized as int64, in microseconds.

Instants are serialized as int64, in microseconds since unix epoch.

Guids are serialized as a pair of fixed64 (see yt/core/misc/guid.proto).
*/

enum ETransactionType
{
    MASTER = 0;
    TABLET = 1;
}

enum ERowModificationType
{
    WRITE = 0;
    DELETE = 1;
}

message TAttribute
{
    required string key = 1;
    required bytes value = 2;
}

message TAttributeDictionary
{
    repeated TAttribute attributes = 1;
}

message TColumnFilter
{
    optional bool all = 1;
    repeated string columns = 2;
}

////////////////////////////////////////////////////////////////////////////////
// Rowsets.
////////////////////////////////////////////////////////////////////////////////

/*
Each rowset is decodeable solely with the descriptor, which encodes rowset kind,
column names and column types. Actual data is passed via attachments in the wire
protocol.
*/

enum ERowsetKind
{
    SCHEMAFUL = 0;
    UNVERSIONED = 1;
    VERSIONED = 2;
}

message TRowsetDescriptor
{
    // Currently, there is only one version. This field is reserved for future changes.
    optional int32 wire_format_version = 1 [default = 1];

    // Specifies, what kind of rows are encoded.
    optional ERowsetKind rowset_kind = 2 [default = UNVERSIONED];

    message TColumnDescriptor
    {
        optional string name = 1;
        optional int32 type = 2;
    }

    // Specifies column names and types.
    // May be omitted for unversioned rowset.
    // Must be present for schemaful rowset.
    // Must be present for versioned rowset.
    repeated TColumnDescriptor columns = 3;
}

////////////////////////////////////////////////////////////////////////////////

message TReqStartTransaction
{
    required ETransactionType type = 1;

    optional int64 timeout = 2;

    // If not null then the transaction must use this externally provided id.
    // Only applicable to tablet transactions.
    optional NYT.NProto.TGuid id = 3;

    optional NYT.NProto.TGuid parent_id = 4;

    optional bool auto_abort = 5 [default = true];
    optional bool sticky = 6 [default = false];
    optional bool ping = 7 [default = true];
    optional bool ping_ancestors = 8 [default = true];

    // TODO(sandello): Attributes, atomicity, durability.
}

message TRspStartTransaction
{
    required NYT.NProto.TGuid id = 1;
    required uint64 start_timestamp = 2;
}

message TReqPingTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
    optional bool sticky = 6 [default = false];
}

message TRspPingTransaction
{
}

message TReqCommitTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
    optional bool sticky = 6 [default = false];
}

message TRspCommitTransaction
{
}

message TReqAbortTransaction
{
    required NYT.NProto.TGuid transaction_id = 1;
    optional bool sticky = 6 [default = false];
}

message TRspAbortTransaction
{
}

message TReqLookupRows
{
    required string path = 1;

    repeated string columns = 2;
    optional uint64 timestamp = 3 [default = 0x3fffffffffffff01];
    optional bool keep_missing_rows = 4 [default = true];

    required TRowsetDescriptor rowset_descriptor = 200;
}

message TRspLookupRows
{
    required TRowsetDescriptor rowset_descriptor = 200;
}

message TReqVersionedLookupRows
{
    required string path = 1;

    repeated string columns = 2;
    optional uint64 timestamp = 3 [default = 0x3fffffffffffff01];
    optional bool keep_missing_rows = 4 [default = true];

    required TRowsetDescriptor rowset_descriptor = 200;
}

message TRspVersionedLookupRows
{
    required TRowsetDescriptor rowset_descriptor = 200;
}

message TReqSelectRows
{
    required string query = 1;
}

message TRspSelectRows
{
    required TRowsetDescriptor rowset_descriptor = 200;
}

message TReqModifyRows
{
    required NYT.NProto.TGuid transaction_id = 1;
    required string path = 2;
    repeated ERowModificationType row_modification_types = 3;

    required TRowsetDescriptor rowset_descriptor = 200;
}

message TRspModifyRows
{
}

////////////////////////////////////////////////////////////////////////////////
// OPTIONS
////////////////////////////////////////////////////////////////////////////////

// 100
message TTransactionalOptions
{
    optional NYT.NProto.TGuid transaction_id = 1;
    optional bool ping = 2 [default = false];
    optional bool ping_ancestors = 3 [default = false];
    optional bool sticky = 4 [default = false];
}

// 101
message TPrerequisiteOptions
{
    message TTransactionPrerequisite {
        required NYT.NProto.TGuid transaction_id = 1;
    }

    message TRevisionPrerequisite {
        required string path = 2; // ypath
        required uint64 revision = 3;
        optional NYT.NProto.TGuid transaction_id = 1; // resolution context
    }

    repeated TTransactionPrerequisite transactions = 1;
    repeated TRevisionPrerequisite revisions = 2;
}

// 102
message TMasterReadOptions
{
    enum EMasterReadKind
    {
        LEADER = 0;
        FOLLOWER = 1;
        CACHE = 2;
    }

    optional EMasterReadKind read_from = 1 [default = FOLLOWER];
    optional int64 success_expiration_time = 2; // duration
    optional int64 failure_expiration_time = 3; // duration
    optional int32 cache_sticky_group_size = 4;
}

// 103
message TMutatingOptions
{
    optional NYT.NProto.TGuid mutation_id = 1;
    optional bool retry = 2;
}

// 104
message TSuppressableAccessTrackingOptions
{
    optional bool suppress_access_tracking = 1 [default = false];
    optional bool suppress_modification_tracking = 2 [default = false];
}

////////////////////////////////////////////////////////////////////////////////
// CYPRESS
////////////////////////////////////////////////////////////////////////////////

//------------------------------------------------------------------------------

message TReqExistsNode
{
    required string path = 1; // ypath

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMasterReadOptions master_read_options = 102;
    optional TSuppressableAccessTrackingOptions suppressable_access_tracking_options = 104;
}

message TRspExistsNode
{
    required bool exists = 1;
}

//------------------------------------------------------------------------------

message TReqGetNode
{
    required string path = 1; // ypath

    optional TColumnFilter attributes = 2;
    optional uint32 max_size = 3;

    // TODO(sandello):
    // std::shared_ptr<const NYTree::IAttributeDictionary> Options;

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMasterReadOptions master_read_options = 102;
    optional TSuppressableAccessTrackingOptions suppressable_access_tracking_options = 104;
}

message TRspGetNode
{
    required bytes value = 1; // yson string
}

//------------------------------------------------------------------------------

message TReqListNode
{
    required string path = 1; // ypath

    optional TColumnFilter attributes = 2;
    optional uint32 max_size = 3;

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMasterReadOptions master_read_options = 102;
    optional TSuppressableAccessTrackingOptions suppressable_access_tracking_options = 104;
}

message TRspListNode
{
    required bytes value = 1; // yson string
}

//------------------------------------------------------------------------------

message TReqCreateNode
{
    required string path = 1; // ypath
    required int32 type = 2; // NObjectClient::EObjectType

    optional TAttributeDictionary attributes = 3;
    optional bool recursive = 4 [default = false];
    optional bool force = 5 [default = false];
    optional bool ignore_existing = 6 [default = false];

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspCreateNode
{
    required NYT.NProto.TGuid node_id = 1;
}

//------------------------------------------------------------------------------

message TReqRemoveNode
{
    required string path = 1; // ypath

    optional bool recursive = 2 [default = true];
    optional bool force = 3 [default = false];

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspRemoveNode
{
}

//------------------------------------------------------------------------------

message TReqSetNode
{
    required string path = 1; // ypath
    required bytes value = 2; // yson string

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspSetNode
{
}

//------------------------------------------------------------------------------

message TReqLockNode
{
    required string path = 1; // ypath
    required int32 mode = 2; // NCypressClient::ELockMode

    optional bool waitable = 3 [default = false];
    optional string child_key = 4;
    optional string attribute_key = 5;

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspLockNode
{
    required NYT.NProto.TGuid node_id = 1;
    required NYT.NProto.TGuid lock_id = 2;
}

//------------------------------------------------------------------------------

message TReqCopyNode
{
    required string src_path = 1; // ypath
    required string dst_path = 2; // ypath

    optional bool recursive = 3 [default = false];
    optional bool force = 4 [default = false];
    optional bool preserve_account = 5 [default = false];
    optional bool preserve_expiration_time = 6 [default = false];

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspCopyNode
{
    required NYT.NProto.TGuid node_id = 1;
}

//------------------------------------------------------------------------------

message TReqMoveNode
{
    required string src_path = 1; // ypath
    required string dst_path = 2; // ypath

    optional bool recursive = 3 [default = false];
    optional bool force = 4 [default = false];
    optional bool preserve_account = 5 [default = false];
    optional bool preserve_expiration_time = 6 [default = false];

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspMoveNode
{
    required NYT.NProto.TGuid node_id = 1;
}

//------------------------------------------------------------------------------

message TReqLinkNode
{
    required string src_path = 1; // ypath
    required string dst_path = 2; // ypath

    optional bool recursive = 3 [default = false];
    optional bool force = 4 [default = false];
    optional bool ignore_existing = 5 [default = false];

    optional TTransactionalOptions transactional_options = 100;
    optional TPrerequisiteOptions prerequisite_options = 101;
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspLinkNode
{
    required NYT.NProto.TGuid node_id = 1;
}

//------------------------------------------------------------------------------

message TReqConcatenateNodes
{
    repeated string src_path = 1; // ypath
    required string dst_path = 2; // ypath

    optional bool append = 3 [default = false];

    optional TTransactionalOptions transactional_options = 100;
    // TODO(sandello): Prerequisite?
    optional TMutatingOptions mutating_options = 103; // required?
}

message TRspConcatenateNodes
{
}

//------------------------------------------------------------------------------

////////////////////////////////////////////////////////////////////////////////
