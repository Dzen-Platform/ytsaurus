package NYT.NScheduler.NProto;

import "yt/core/misc/error.proto";
import "yt/core/misc/guid.proto";

////////////////////////////////////////////////////////////////////////////////

// Starts a new operation.

message TReqStartOperation
{ 
    // EOperationType value.
    required int32 type = 1;
    
    // Operation spec in YSON.
    required bytes spec = 2;

    // NB: Transaction id (if any) is passed via extension, like in Cypress commands.
}

message TRspStartOperation
{
    required NYT.NProto.TGuid operation_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Aborts an existing operation.

message TReqAbortOperation
{ 
    required NYT.NProto.TGuid operation_id = 1;
}

message TRspAbortOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Puts an operation into suspended state.

message TReqSuspendOperation
{ 
    required NYT.NProto.TGuid operation_id = 1;
}

message TRspSuspendOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Resumes an earlier suspended operation.

message TReqResumeOperation
{ 
    required NYT.NProto.TGuid operation_id = 1;
}

message TRspResumeOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Waits until a given operation is finished.

message TOperationResult
{
    required NYT.NProto.TError error = 1;
}

message TReqWaitForOperation
{ 
    required NYT.NProto.TGuid operation_id = 1;
    // Specifies a timeout to wait for the operation to complete.
    required int64 timeout = 4;
}

message TRspWaitForOperation
{
    // If True then the operation may have just finished (either successfully or not).
    // The client will be retrieving the outcome from Cypress.
    required bool maybe_finished = 1;
}

////////////////////////////////////////////////////////////////////////////////

