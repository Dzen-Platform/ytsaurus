package NYT.NScheduler.NProto;

import "yt/core/misc/proto/error.proto";
import "yt/core/misc/proto/guid.proto";

////////////////////////////////////////////////////////////////////////////////

// Starts a new operation.

message TReqStartOperation
{
    // EOperationType value.
    required int32 type = 1;

    // Operation spec in YSON.
    required bytes spec = 2;

    // NB: Transaction id (if any) is passed via extension, like in Cypress commands.
}

message TRspStartOperation
{
    required NYT.NProto.TGuid operation_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

// Aborts an existing operation.

message TReqAbortOperation
{
    required NYT.NProto.TGuid operation_id = 1;
    optional string abort_message = 2;
}

message TRspAbortOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Puts an operation into suspended state.

message TReqSuspendOperation
{
    required NYT.NProto.TGuid operation_id = 1;
    optional bool abort_running_jobs = 2;
}

message TRspSuspendOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Resumes an earlier suspended operation.

message TReqResumeOperation
{
    required NYT.NProto.TGuid operation_id = 1;
}

message TRspResumeOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Completes an existing operation.

message TReqCompleteOperation
{
    required NYT.NProto.TGuid operation_id = 1;
}

message TRspCompleteOperation
{ }

////////////////////////////////////////////////////////////////////////////////

// Waits until a given operation is finished.

message TOperationResult
{
    required NYT.NProto.TError error = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TResourceLimits
{
    optional double cpu = 1;
    optional int32 user_slots = 2;
    optional int64 memory = 3;
    optional int32 network = 4;
}

message TSchedulingOptions
{
    optional double weight = 1;
    optional TResourceLimits resource_limits = 2;
}

message TSchedulingOptionsPerPoolTree
{
    required bytes tree_id = 1;
    required TSchedulingOptions scheduling_options = 2;
}

message TOwnerList
{
    repeated bytes owners = 1;
}

// Updates operation runtime params.

message TReqUpdateOperationParameters
{
    required NYT.NProto.TGuid operation_id = 1;
    optional TOwnerList owner_list = 2;
    repeated TSchedulingOptionsPerPoolTree options = 3;
}

message TRspUpdateOperationParameters
{ }

////////////////////////////////////////////////////////////////////////////////
