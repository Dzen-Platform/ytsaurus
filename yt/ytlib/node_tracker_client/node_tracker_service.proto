package NYT.NNodeTrackerClient.NProto;

import "yt/core/misc/guid.proto";
import "yt/core/misc/error.proto";
import "yt/ytlib/node_tracker_client/node.proto";
import "yt/ytlib/hive/cell_directory.proto";

////////////////////////////////////////////////////////////////////////////////

// Chunk Manager stuff.

message TChunkAddInfo
{
    required NYT.NProto.TGuid chunk_id = 1;
    optional bool cached = 2 [default = false];
    optional bool active = 3 [default = false];
    optional bool sealed = 4 [default = false];
}

message TChunkRemoveInfo
{
    required NYT.NProto.TGuid chunk_id = 1;
    optional bool cached = 2 [default = false];
}

////////////////////////////////////////////////////////////////////////////////

message TReqRegisterNode
{
    required TAddressMap addresses = 1;
    required TNodeStatistics statistics = 2;
    optional NYT.NProto.TGuid lease_transaction_id = 3;
    optional int32 node_id = 4;
}

message TRspRegisterNode
{
    required int32 node_id = 1;
}

////////////////////////////////////////////////////////////////////////////////

message TReqFullHeartbeat
{
    required int32 node_id = 1;
    required TNodeStatistics statistics = 2;

    // Chunk Manager stuff.
    repeated TChunkAddInfo chunks = 3;
    required int32 stored_chunk_count = 4;
    required int32 cached_chunk_count = 5;
}

message TRspFullHeartbeat
{ }

////////////////////////////////////////////////////////////////////////////////

message TTabletSlotInfo
{
    required int32 peer_state = 1;
    optional int32 peer_id = 2;
    optional NYT.NHive.NProto.TCellInfo cell_info = 3;
}

message TTabletStatistics
{
    required int32 partition_count = 1;
    required int32 store_count = 2;
    optional int32 preload_pending_store_count = 3 [default = 0];
    optional int32 preload_completed_store_count = 4 [default = 0];
    optional int32 preload_failed_store_count = 5 [default = 0];
}

message TTabletPerformanceCounters
{
    required int64 dynamic_row_read_count = 1;
    required int64 dynamic_row_lookup_count = 2;
    required int64 dynamic_row_write_count = 3;
    required int64 dynamic_row_delete_count = 4;
    required int64 static_chunk_row_read_count = 5;
    required int64 static_chunk_row_lookup_count = 6;
    required int64 static_chunk_row_lookup_true_negative_count = 9;
    required int64 static_chunk_row_lookup_false_positive_count = 10;
    required int64 unmerged_row_read_count = 7;
    required int64 merged_row_read_count = 8;
}

message TTabletInfo
{
    required NYT.NProto.TGuid tablet_id = 1;
    required TTabletStatistics statistics = 2;
    required TTabletPerformanceCounters performance_counters = 3;
}

message TReqIncrementalHeartbeat
{
    required int32 node_id = 1;

    // Node Tracker stuff.
    required TNodeStatistics statistics = 2;
    repeated NYT.NProto.TError alerts = 3;

    // Chunk Manager stuff.
    repeated TChunkAddInfo added_chunks = 4;
    repeated TChunkRemoveInfo removed_chunks = 5;

    // Tablet Manager stuff.
    repeated TTabletSlotInfo tablet_slots = 6;
    repeated TTabletInfo tablets = 8;
}

message TCreateTabletSlotInfo
{
    required NYT.NProto.TGuid cell_id = 1;
    required int32 peer_id = 2;
    required bytes options = 3; // NTabletClient::TTabletCellOptions
}

message TConfigureTabletSlotInfo
{
    required NYT.NHive.NProto.TCellDescriptor cell_descriptor = 1;
    required NYT.NProto.TGuid prerequisite_transaction_id = 2;
}

message TRemoveTabletSlotInfo
{
    required NYT.NProto.TGuid cell_id = 1;
}

message TRspIncrementalHeartbeat
{
    // Tablet Manager stuff.
    repeated TCreateTabletSlotInfo tablet_slots_to_create = 1;
    repeated TRemoveTabletSlotInfo tablet_slots_to_remove = 2;
    repeated TConfigureTabletSlotInfo tablet_slots_configure = 3;

    // General.
    optional string rack = 6;
}

////////////////////////////////////////////////////////////////////////////////
