package NYT.NQueryClient.NProto;

import "yt/core/misc/guid.proto";
import "yt/ytlib/chunk_client/chunk_spec.proto";
import "yt/ytlib/table_client/table_chunk_meta.proto";
import "yt/ytlib/new_table_client/chunk_meta.proto";

////////////////////////////////////////////////////////////////////////////////

message TExpression
{
    required int32 kind = 1;
    required uint32 type = 2;

    required int32 location_begin = 3;
    required int32 location_end = 4;

    extensions 100 to max;
}

message TLiteralExpression
{
    extend TExpression {
        optional TLiteralExpression literal_expression = 103;
    }

    optional int64 int64_value = 1;
    optional uint64 uint64_value = 2;
    optional double double_value = 3;
    optional string string_value = 4;
    optional bool boolean_value = 5;
}

message TReferenceExpression
{
    extend TExpression {
        optional TReferenceExpression reference_expression = 104;
    }
    required string column_name = 1;
}

message TFunctionExpression
{
    extend TExpression {
        optional TFunctionExpression function_expression = 105;
    }
    required string function_name = 1;
    repeated TExpression arguments = 2;
}

message TUnaryOpExpression
{
    extend TExpression {
        optional TUnaryOpExpression unary_op_expression = 106;
    }
    required int32 opcode = 1; // EUnaryOp
    required TExpression operand = 2;
}

message TBinaryOpExpression
{
    extend TExpression {
        optional TBinaryOpExpression binary_op_expression = 107;
    }
    required int32 opcode = 1; // EBinaryOp
    required TExpression lhs = 2;
    required TExpression rhs = 3;
}

message TInOpExpression
{
    extend TExpression {
        optional TInOpExpression in_op_expression = 108;
    }
    repeated TExpression arguments = 1;
    repeated bytes values = 2;
}

message TNamedItem
{
    required TExpression expression = 1;
    required string name = 2;
}

message TAggregateItem
{
    required TExpression expression = 1;
    required int32 aggregate_function = 2; // EAggregateFunction
    required string name = 3;
}

message TGroupClause
{
    repeated TNamedItem group_items = 1;
    repeated TAggregateItem aggregate_items = 2;
}

message TProjectClause
{
    repeated TNamedItem projections = 1;
}

message TJoinClause
{
    repeated string join_columns = 1;
    required NYT.NVersionedTableClient.NProto.TTableSchemaExt self_table_schema = 2;
    required NYT.NVersionedTableClient.NProto.TTableSchemaExt foreign_table_schema = 3;
    required NYT.NVersionedTableClient.NProto.TKeyColumnsExt foreign_key_columns = 4;
}

message TQuery
{
    required NYT.NProto.TGuid id = 1;
    required int64 input_row_limit = 2;
    required int64 output_row_limit = 3;

    required int64 limit = 4;

    required NYT.NVersionedTableClient.NProto.TTableSchemaExt table_schema = 5;
    required NYT.NVersionedTableClient.NProto.TKeyColumnsExt key_columns = 6;

    optional TJoinClause join_clause = 7;
    optional TExpression predicate = 8;
    optional TGroupClause group_clause = 9;
    optional TProjectClause project_clause = 10;
}

message TPlanFragment
{
    required string source = 1;

    repeated NYT.NChunkClient.NProto.TChunkSpec data_split = 2;
    required NYT.NChunkClient.NProto.TChunkSpec foreign_data_split = 3;
    required TQuery query = 4;
    required bool ordered = 5;
}

////////////////////////////////////////////////////////////////////////////////

