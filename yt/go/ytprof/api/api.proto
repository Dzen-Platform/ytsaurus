syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/api/httpbody.proto";
import "google/protobuf/empty.proto";

option go_package = "a.yandex-team.ru/yt/go/ytprof/api";


message TimePeriod {
    string period_start_time = 1;
    string period_end_time = 2;
}

message Metadata {
    string profile_type = 1;
    string host = 2;
    string arc_revision = 3;
    string profile_id = 4;
    string timestamp = 5;
    map<string, string> user_tags = 6;
}

message Metaquery {
    TimePeriod time_period = 1;
    string query = 2;
    Metadata metadata_pattern = 3;
    int32 result_skip = 4;
    int32 result_limit = 5;
    string system = 6;
}

message GetRequest {
    string profile_id = 1;
    string system = 2;
}

message MergeRequest {
    repeated string profile_ids = 1;
    string system = 2;
}

message MergeLinkResponse {
    string link = 1;
}

message MergeAllRequest {
    Metaquery metaquery = 1;
}

message ListRequest {
    Metaquery metaquery = 1;
}

message ListResponse {
    repeated Metadata metadata = 1;
    int32 size = 2;
}

message SystemsResponse {
    repeated string system = 1;
}

message SuggestTagsResponse {
    repeated string tag = 1;
}

message SuggestTagsRequest {
    string system = 1;
}

message SuggestValuesRequest {
    string tag = 1;
    string system = 2;
}

message SuggestValuesResponse {
    repeated string value = 1;
}


service YTProfService {
    rpc List(ListRequest) returns (ListResponse) {
        option (google.api.http) = {
            post: "/api/list"
            body: "*"
        };
    }

    rpc Get(GetRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/get"
        };
    }

    rpc Merge(MergeRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            get: "/api/merge"
        };
    }

    rpc MergeLink(MergeRequest) returns (MergeLinkResponse) {
        option (google.api.http) = {
            get: "/api/merge_link"
        };
    }

    rpc MergeAll(MergeAllRequest) returns (google.api.HttpBody) {
        option (google.api.http) = {
            post: "/api/merge_all"
            body: "*"
        };
    }
    
    rpc Systems(google.protobuf.Empty) returns (SystemsResponse) {
        option (google.api.http) = {
            get: "/api/systems"
        };
    }
    
    rpc SuggestTags(SuggestTagsRequest) returns (SuggestTagsResponse) {
        option (google.api.http) = {
            get: "/api/suggest_tags"
        };
    }
    
    rpc SuggestValues(SuggestValuesRequest) returns (SuggestValuesResponse) {
        option (google.api.http) = {
            get: "/api/suggest_values"
        };
    }
}
