syntax = "proto3";

package NYP.NClient.NApi.NProto;

import "yp/client/api/proto/conditions.proto";
import "yp/client/api/proto/data_model.proto";
import "yp/client/api/proto/deploy.proto";
import "yp/client/api/proto/multi_cluster_replica_set.proto";
import "yp/client/api/proto/replica_set.proto";
import "yp/client/api/proto/pod_agent.proto";

import "yt/core/yson/proto/protobuf_interop.proto";

option java_package = "ru.yandex.yp.client.api";
option java_outer_classname = "EnvironmentApi";
option java_multiple_files = true;

option (NYP.NClient.NApi.NProto.object_type) = {
    camel_case_name: "Environment"
    snake_case_name: "environment"
    type_value: 19
};

// Environment - see https://wiki.yandex-team.ru/drug/Environment/

// TODO(risenberg): dctl uses this, remove after switching to auto-generation.
message TEnvironment
{
    TEnvironmentMeta meta = 1;
    TEnvironmentSpec spec = 2;
    TEnvironmentStatus status = 3;
}

message TEnvironmentMeta
{
    string id = 1;
}

message TEnvironmentSpec
{
    // Should be incremented on any update
    // TODO: will be moved to meta after YP-710.
    // For now you can write a manually generated timestamp there.
    uint64 revision = 1;
    // <component id> -> <component spec>.
    map<string, TComponentSpec> components = 2 [(NYT.NYson.NProto.yson_map) = true];
    // In form "abc:service:<int id>".
    string abc_service_id = 3;
}

message TEnvironmentStatus
{
    // <component id> -> <component status>.
    map<string, TComponentStatus> components = 1 [(NYT.NYson.NProto.yson_map) = true];
    // Revision of spec last treated by controller.
    // Other environment-wide status fields refer to this revision.
    // Component specs may refer to other revisions, as specified inside them.
    uint64 revision = 2;
    // Environment spec has been accepted by controller as valid.
    NYP.NClient.NApi.NProto.TCondition validated = 3;
}

// Component

// Network settings for requests from infrastructure.
message TNetworkDefaults
{
    string network_id = 1;
}

message TComponentSpec
{
    TNetworkDefaults network_defaults = 1;

    message TReplicaSetDeploy
    {
        message TPerClusterSettings
        {
            uint32 pod_count = 1;
        }

        NYP.NClient.NApi.NProto.TReplicaSetSpec replica_set_template = 1;
        map<string, TPerClusterSettings> per_cluster_settings = 2 [(NYT.NYson.NProto.yson_map) = true];
    }

    message TMultiClusterReplicaSetDeploy
    {
        NYP.NClient.NApi.NProto.TMultiClusterReplicaSetSpec replica_set = 1;
    }

    oneof pod_deploy_primitive {
        TReplicaSetDeploy replica_set = 10;
        TMultiClusterReplicaSetDeploy multi_cluster_replica_set = 11;
    }

    TTvmConfig tvm_config = 2;
}

message TComponentStatus
{
    // Spec that is currently being deployed. May be older than contents of TEnvironmentSpec.
    TComponentSpec current_target = 1;
    // Deploy of current_target has started, but has not completed yet.
    NYP.NClient.NApi.NProto.TCondition in_progress = 2;
    // Deploy of current_target has been completed.
    // Does not switch back to false if something breaks later (TODO: this will probably change).
    NYP.NClient.NApi.NProto.TCondition ready = 3;
    // Summary of deploy progress.
    TDeployProgress progress = 4;
    // Revision of environment from which 'current_target' was derived.
    uint64 target_revision = 5;

    message TReplicaSetDeploy
    {
        message TPerClusterStatus
        {
            string replica_set_ref = 1;
            string endpoint_set_ref = 2;
        }

        // <cluster id> -> <cluster status>.
        map<string, TPerClusterStatus> cluster_statuses = 1 [(NYT.NYson.NProto.yson_map) = true];
    }

    message TMultiClusterReplicaSetDeploy
    {
        message TPerClusterStatus
        {
            string endpoint_set_ref = 1;
        }

        string replica_set_ref = 1;
        // <cluster id> -> <cluster status>.
        map<string, TPerClusterStatus> cluster_statuses = 2 [(NYT.NYson.NProto.yson_map) = true];
    }

    // Details for specific component types.
    oneof details
    {
        TReplicaSetDeploy replica_set = 10;
        TMultiClusterReplicaSetDeploy multi_cluster_replica_set = 11;
    }
}

// TVM

message TTvmApp
{
    uint32 app_id = 1;
    string alias = 2;
}

message TTvmClient
{
    // secret_selector is used for generating secret env var with
    // predefined name TVM_CLIENT_SECRET. TVM_CLIENT_SECRET env var is written
    // to tvmtool's workload spec only and used for generating tvmtool config.
    // Also secret_selector.alias is the key of secret in TPodSpec.secrets.
    NInfra.NPodAgent.API.SecretEnvSelector secret_selector = 1;
    TTvmApp source = 2;
    repeated TTvmApp destinations = 3;
}

// Config for tvmtool.
// See https://wiki.yandex-team.ru/passport/tvm2/tvm-daemon/ for details.
message TTvmConfig
{
    enum EMode
    {
        UNKNOWN = 0
        [(NYT.NYson.NProto.enum_value_name) = "unknown"];

        DISABLED = 1
        [(NYT.NYson.NProto.enum_value_name) = "disabled"];

        ENABLED = 2
        [(NYT.NYson.NProto.enum_value_name) = "enabled"];
    }
    EMode mode = 1;
    // Blackbox instances to check tickets.
    // See https://wiki.yandex-team.ru/passport/tvm2/tvm-daemon/#lokalno for details.
    string blackbox_environment = 2;
    repeated TTvmClient clients = 3;
    // Port number on which tvmtool listens. It binds to loopback interface only.
    uint32 client_port = 4;
    // Port number to ping tvmtool. It binds to all interfaces.
    uint32 ping_port = 5;
}
