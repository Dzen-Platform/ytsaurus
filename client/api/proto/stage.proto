syntax = "proto3";

package NYP.NClient.NApi.NProto;

import "yp/client/api/proto/conditions.proto";
import "yp/client/api/proto/data_model.proto";
import "yp/client/api/proto/deploy.proto";
import "yp/client/api/proto/downloadable_resources.proto";
import "yp/client/api/proto/multi_cluster_replica_set.proto";
import "yp/client/api/proto/replica_set.proto";
import "yp/client/api/proto/pod_agent.proto";

import "yt/core/yson/proto/protobuf_interop.proto";

option python_package = "yp_proto.yp.client.api.proto";

option go_package = "a.yandex-team.ru/yp/go/proto/api";

option java_package = "ru.yandex.yp.client.api";
option java_outer_classname = "Stage";
option java_multiple_files = true;

option (NYP.NClient.NApi.NProto.object_type) = {
    camel_case_name: "Stage"
    snake_case_name: "stage"
    type_value: 19
};

// Stage - see https://wiki.yandex-team.ru/deploy/Stage

message TStageSpec
{
    // Should be incremented on any update
    // TODO: will be moved to meta after YP-710.
    // For now you can write a manually generated timestamp there.
    uint64 revision = 1 [(NYP.NClient.NApi.NProto.etc) = true];
    // <unit id> -> <unit spec>.
    map<string, TDeployUnitSpec> deploy_units = 2 [(NYT.NYson.NProto.yson_map) = true, (NYP.NClient.NApi.NProto.etc) = true];
    // In form "abc:service:<int id>".
    string account_id = 3;
    
    message TRevisionInfo
    {
        // Human-readable description.
        string description = 1;
    }
    
    // Information about current revision of the spec.
    // NOTE: see https://st.yandex-team.ru/YP-1270 for api support.
    TRevisionInfo revision_info = 4 [(NYP.NClient.NApi.NProto.etc) = true];
}

message TStageStatus
{
    // <unit id> -> <unit status>.
    map<string, TDeployUnitStatus> deploy_units = 1 [(NYT.NYson.NProto.yson_map) = true];
    // Revision of spec last treated by controller.
    // Other stage-wide status fields refer to this revision.
    // Unit specs may refer to other revisions, as specified inside them.
    uint64 revision = 2;
    // Stage spec has been accepted by controller as valid.
    NYP.NClient.NApi.NProto.TCondition validated = 3;
    // YP timestamp of spec last treated by controller.
    uint64 spec_timestamp = 4;
    
    message THistoryEntry
    {
        // YP timestamp of spec.
        uint64 timestamp = 1;
        TStageSpec spec = 2;        
    }
    
    // Last valid specs seen by controller, including the current one.
    // Ordered by timestamp descending.
    // TODO: temporary history implementation until YP-863 is deployed.
    repeated THistoryEntry history = 5;
}

// Deploy unit

// Network settings for requests from infrastructure.
message TNetworkDefaults
{
    string network_id = 1;
}

// Identity is value-based - two descriptions are same if all their fields are equal.
message TDockerImageDescription
{
    // Docker registry host name, defaults to "registry.yandex.net".
    string registry_host = 1;
    // Image name, for example, "search/ubuntu".
    string name = 2;
    // Image tag, for example, "1.189".
    string tag = 3;
}

message TDeployUnitSpec
{
    TNetworkDefaults network_defaults = 1;

    message TReplicaSetDeploy
    {
        message TPerClusterSettings
        {
            uint32 pod_count = 1;
            // If present, override replica_set_template.deployment_strategy value.
            NYP.NClient.NApi.NProto.TReplicaSetSpec.TDeploymentStrategy deployment_strategy = 2;
        }

        NYP.NClient.NApi.NProto.TReplicaSetSpec replica_set_template = 1;
        map<string, TPerClusterSettings> per_cluster_settings = 2 [(NYT.NYson.NProto.yson_map) = true];
    }

    message TMultiClusterReplicaSetDeploy
    {
        NYP.NClient.NApi.NProto.TMultiClusterReplicaSetSpec replica_set = 1;
    }

    message TEndpointSetTemplate
    {
        int32 port = 1;
    }

    oneof pod_deploy_primitive {
        TReplicaSetDeploy replica_set = 10;
        TMultiClusterReplicaSetDeploy multi_cluster_replica_set = 11;
    }

    TTvmConfig tvm_config = 2;
    // <box id> -> <docker image description>.
    // If box id is present in this map, layers from corresponding docker image will be added
    // below layers specified in pod agent spec.
    // NOTE: box id must be present in pod agent spec.
    map<string, TDockerImageDescription> images_for_boxes = 3 [(NYT.NYson.NProto.yson_map) = true];
    // NOTE: now available only one endpoint_set per cluster ==> length must be less or equals than 1
    repeated TEndpointSetTemplate endpoint_sets = 4;
    // <box id> -> <juggler config for box>.
    // If box id is present in this map, a juggler workload will be added to it.
    // NOTE: box id must be present in pod agent spec.
    map<string, TBoxJugglerConfig> box_juggler_configs = 5 [(NYT.NYson.NProto.yson_map) = true];
    TLogbrokerConfig logbroker_config = 6;
}

message TBoxJugglerConfig
{
    // Tarballs with user's checks (may be compressed).
    repeated TDownloadableResource archived_checks = 1;
    // Juggler agent binary resource.
    // Empty juggler_agent_binary will be replace by default
    TDownloadableResource juggler_agent_binary = 2;
    // juggler-client will listen on this port
    uint32 port = 3;
}

message TDockerImageContents
{
    // Image for which contents were retrieved.
    TDockerImageDescription description = 1;
    // Layer order is from bottom to top, reverse to porto and pod agent
    repeated TDownloadableResource layers = 2;
    // Start command and arguments like ["/bin/sh", "-c", "java -jar /run.jar"]
    repeated string command = 3;
    // Username for start command
    string user = 4;
    // Group name for start command
    string group = 5;
    // Working dir for start command
    string working_dir = 6;
    // Environment variables
    map<string, string> environment = 7 [(NYT.NYson.NProto.yson_map) = true];
}

message TDeployUnitStatus
{
    // Spec that is currently being deployed. May be older than contents of TStageSpec.
    TDeployUnitSpec current_target = 1;
    // Deploy of current_target has started, but has not completed yet.
    NYP.NClient.NApi.NProto.TCondition in_progress = 2;
    // Deploy of current_target has been completed.
    // May switch back to false if something breaks later.
    NYP.NClient.NApi.NProto.TCondition ready = 3;
    // Summary of deploy progress.
    TDeployProgress progress = 4;
    // Revision of stage from which 'current_target' was derived.
    uint64 target_revision = 5;
    // YP timestamp of stage spec from which 'current_target' was derived.
    uint64 target_spec_timestamp = 6;
    // Resolved docker images from spec.
    repeated TDockerImageContents docker_image_contents = 7;

    message TReplicaSetDeploy
    {
        message TPerClusterStatus
        {
            // Created replica set id in this cluster.
            string replica_set_id = 1;
            // Created endpoint set id in this cluster.
            string endpoint_set_id = 2;
        }

        // <cluster id> -> <cluster status>.
        map<string, TPerClusterStatus> cluster_statuses = 1 [(NYT.NYson.NProto.yson_map) = true];
    }

    message TMultiClusterReplicaSetDeploy
    {
        message TPerClusterStatus
        {
            // Endpoint set created in this cluster for replica set.
            string endpoint_set_id = 1;
        }

        // Created multi cluster replica set id.
        string replica_set_id = 1;
        // <cluster id> -> <cluster status>.
        map<string, TPerClusterStatus> cluster_statuses = 2 [(NYT.NYson.NProto.yson_map) = true];
    }

    // Details for specific deploy primitives.
    oneof details
    {
        TReplicaSetDeploy replica_set = 10;
        TMultiClusterReplicaSetDeploy multi_cluster_replica_set = 11;
    }
}

// TVM

// https://wiki.yandex-team.ru/passport/tvm2/abc/
message TTvmApp
{
    uint32 app_id = 1;
    string alias = 2;
    // ABC service to which this app is assigned.
    string abc_service_id = 3;
}

message TTvmClient
{
    // secret_selector is used for generating secret env var with
    // predefined name TVM_CLIENT_SECRET. TVM_CLIENT_SECRET env var is written
    // to tvmtool's workload spec only and used for generating tvmtool config.
    // Also secret_selector.alias is the key of secret in TPodSpec.secrets.
    NInfra.NPodAgent.API.SecretSelector secret_selector = 1;
    TTvmApp source = 2;
    repeated TTvmApp destinations = 3;
}

// Config for tvmtool.
// See https://wiki.yandex-team.ru/passport/tvm2/tvm-daemon/ for details.
message TTvmConfig
{
    enum EMode
    {
        UNKNOWN = 0
        [(NYT.NYson.NProto.enum_value_name) = "unknown"];

        DISABLED = 1
        [(NYT.NYson.NProto.enum_value_name) = "disabled"];

        ENABLED = 2
        [(NYT.NYson.NProto.enum_value_name) = "enabled"];
    }
    EMode mode = 1;
    // Blackbox instances to check tickets.
    // See https://wiki.yandex-team.ru/passport/tvm2/tvm-daemon/#lokalno for details.
    string blackbox_environment = 2;
    repeated TTvmClient clients = 3;
    // Port number on which tvmtool listens. It binds to loopback interface only.
    uint32 client_port = 4;
    // Port number to ping tvmtool. It binds to all interfaces.
    uint32 ping_port = 5;
    // Custom tvmtool.
    TDownloadableResource tvmtool_binary = 6;
}

message TLogbrokerConfig {
    // Custom push agent.
    TDownloadableResource push_agent_layer = 1;
    reserved 6;
    reserved "push_agent_binary";
}
