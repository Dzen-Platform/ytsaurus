syntax = "proto3";

package NYP.NClient.NApi.NProto;

import "yp/client/api/proto/data_model.proto";
import "yp/client/api/proto/deploy_patch.proto";

import "yt/core/yson/proto/protobuf_interop.proto";

option python_package = "yp_proto.yp.client.api.proto";

option go_package = "a.yandex-team.ru/yp/go/proto/ypapi";

option java_package = "ru.yandex.yp.client.api";
option java_outer_classname = "ReleaseRule";
option java_multiple_files = true;

option (NYP.NClient.NApi.NProto.object_type) = {
    camel_case_name: "ReleaseRule"
    snake_case_name: "release_rule"
    type_value: 23
};

message TSandboxSelector
{
    // Task type of Sandbox release to be matched with release rule.
    string task_type = 1;
    // Resource types of Sandbox release to be matched with release rule.
    repeated string resource_types = 2;
    // Release types (stable, testing, etc) of Sandbox release to be matched
    // with release rule.
    repeated string release_types = 3;
    repeated string task_authors = 4;
}

message TDockerSelector
{
    // Image name of Docker release to be matched with release rule.
    string image_name = 1;
    // Release types (stable, testing, etc) of Docker release to be matched
    // with release rule.
    repeated string release_types = 3;
}

message TAutoCommitPolicy
{
    enum EType
    {
        // Do not auto commit ticket, only manual commit is allowed.
        NONE = 0
        [(NYT.NYson.NProto.enum_value_name) = "none"];

        // Auto commit last created ticket for this release rule.
        MAINTAIN_ACTIVE_TRUNK = 1
        [(NYT.NYson.NProto.enum_value_name) = "maintain_active_trunk"];

        // Auto commit first created ticket for this release rule.
        SEQUENTIAL_COMMIT = 2
        [(NYT.NYson.NProto.enum_value_name) = "sequential_commit"];
    }
    EType type = 1;
}

message TReleaseRuleSpec
{
    enum ESelectorSource
    {
        NONE = 0
        [(NYT.NYson.NProto.enum_value_name) = "none"];

        STAGE = 1
        [(NYT.NYson.NProto.enum_value_name) = "stage"];

        CUSTOM = 2
        [(NYT.NYson.NProto.enum_value_name) = "custom"];
    }

    string stage_id = 1;
    // Selector describes how release rule will be matched with release.
    oneof selector
    {
        TSandboxSelector sandbox = 10 [(NYP.NClient.NApi.NProto.etc) = true];
        TDockerSelector docker = 11 [(NYP.NClient.NApi.NProto.etc) = true];
    }
    // Patches describe how to patch stage spec or dynamic resource spec
    // with release data.
    // <patch id> -> <patch spec>.
    map<string, NYP.NClient.NApi.NProto.TDeployPatchSpec> patches = 6 [(NYT.NYson.NProto.yson_map) = true, (NYP.NClient.NApi.NProto.etc) = true];
    string description = 2 [(NYP.NClient.NApi.NProto.etc) = true];
    // Users who recieve notifications on release commit.
    repeated string responsibles = 3 [(NYP.NClient.NApi.NProto.etc) = true];
    // Auto commit policy describes how to commit tickets created by
    // release rule.
    TAutoCommitPolicy auto_commit_policy = 4 [(NYP.NClient.NApi.NProto.etc) = true];
    // Recipe which will be used for auto commit.
    string recipe_id = 5 [(NYP.NClient.NApi.NProto.etc) = true];
    ESelectorSource selector_source = 7 [(NYP.NClient.NApi.NProto.etc) = true];
}

message TReleaseRuleStatus
{
    uint32 created_ticket_count = 1;
}
