syntax = "proto3";

package NYP.NClient.NApi.NProto;

import "yp/client/api/proto/conditions.proto";
import "yp/client/api/proto/data_model.proto";

import "yt/core/yson/proto/protobuf_interop.proto";

import "google/protobuf/timestamp.proto";

option python_package = "yp_proto.yp.client.api.proto";

option go_package = "a.yandex-team.ru/yp/go/proto/ypapi";

option java_package = "ru.yandex.yp.client.api";
option java_outer_classname = "DeployPatch";
option java_multiple_files = true;

message TStaticResourceRef
{
    // Deploy unit where to patch static resource.
    string deploy_unit_id = 1;
    // static_resource_ref or layer_ref from pod agent spec.
    oneof resource_ref
    {
        string static_resource_ref = 10;
        string layer_ref = 11;
    }
}

message TDynamicResourceRef
{
    // Dynamic resource spec where to patch url.
    string dynamic_resource_id = 1;
    // Deploy group in dynamic resource spec where to patch url.
    // All urls in the first deploy group with equal mark will be replaced to
    // url from release.
    string deploy_group_mark = 2;
}

message TDockerImageRef
{
    string deploy_unit_id = 1;
    // Box id from deploy unit where to patch docker image.
    string box_id = 2;
}

message TSandboxResourceDeployPatch
{
    // sandbox_resource_type is used to address resource from Sandbox release
    // with which patch will be applied.
    string sandbox_resource_type = 1;
    oneof resource_ref
    {

        // static_resource_ref is used to address static resource in stage spec to patch.
        TStaticResourceRef static = 10;
        // dynamic_resource_ref is used to address url in dynamic resource spec to patch.
        TDynamicResourceRef dynamic = 11;
    }
}

message TDockerImageDeployPatch
{
    // docker_image_ref is used to address boxes in stage spec
    // where to patch docker image.
    TDockerImageRef docker_image_ref = 1;
}

message TDeployPatchSpec
{
    oneof payload
    {
        TSandboxResourceDeployPatch sandbox = 10;
        TDockerImageDeployPatch docker = 11;
    }
}

message TDeployPatchProgress
{
    // Patch is not applied.
    TCondition pending = 1;
    // Patch was applied and deploy is in progress.
    TCondition in_progress = 2;
    // Patch was applied and deploy finished successfully.
    TCondition success = 3;
    // Patch was applied and deploy failed.
    TCondition failed = 4;
    // Patch was applied but deploy didn't finish (because of interrupt for example).
    TCondition cancelled = 5;
    google.protobuf.Timestamp start_time = 6;
    google.protobuf.Timestamp end_time = 7;
    google.protobuf.Timestamp last_transition_time = 8;
}

enum EDeployPatchActionType
{
    // NONE action. Nothing actions are performed.
    DPAT_NONE = 0
    [(NYT.NYson.NProto.enum_value_name) = "none"];

    // Commit patch. No actions can be performed after commit.
    DPAT_COMMIT = 1
    [(NYT.NYson.NProto.enum_value_name) = "commit"];

    // Skip patch. Patch will no be applied.
    // No actions can be performed after skip.
    DPAT_SKIP = 2
    [(NYT.NYson.NProto.enum_value_name) = "skip"];

    // Put patch on hold.
    DPAT_ON_HOLD = 3
    [(NYT.NYson.NProto.enum_value_name) = "on_hold"];

    // Wait for other patches to apply.
    DPAT_WAIT = 4
    [(NYT.NYson.NProto.enum_value_name) = "wait"];
}

message TDeployPatchAction
{
    EDeployPatchActionType type = 1;
    // One word (e.g. WAIT_FOR_OTHER_PATCH) for computers and short summary.
    string reason = 2;
    // Some human readable message.
    string message = 3;
}

message TDeployPatchStatus
{
    // Patch progress. After applying patch this status will be setted
    // by status of patched entity.
    TDeployPatchProgress progress = 1;

    // Any action on patch is performed by settings action.
    // Examples:
    // * setting action to COMMIT triggers committing (applying) patch to patched entity (DU or dynresource);
    // * setting action to SKIP forbids any other actions on this patch.
    TDeployPatchAction action = 2;

    // Spec timestamp of stage when patch was committed.
    uint64 stage_spec_timestamp = 3;
}
