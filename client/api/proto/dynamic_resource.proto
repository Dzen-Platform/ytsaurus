syntax = "proto3";

package NYP.NClient.NApi.NProto;

import "yp/client/api/proto/data_model.proto";
import "yp/client/api/proto/conditions.proto";

import "yt/core/yson/proto/protobuf_interop.proto";
import "yt/core/ytree/proto/attributes.proto";

option python_package = "yp_proto.yp.client.api.proto";

option go_package = "a.yandex-team.ru/yp/go/proto/api";

option java_package = "ru.yandex.yp.client.api";
option java_outer_classname = "DynamicResource";

////////////////////////////////////////////////////////////////////////////////

option (NYP.NClient.NApi.NProto.object_type) = {
    camel_case_name: "DynamicResource"
    snake_case_name: "dynamic_resource"
    type_value: 17
};

// For field descriptions see NYP.NClient.NApi.NProto.TSchemaMeta.
message TDynamicResourceMetaBase
{
    // Id of pod_set where to deploy the resource.
    string pod_set_id = 4;
}

message TDynamicResourceSpec
{
    reserved 2, 3, 5;
    reserved "url", "urls", "storage_options";

    // Resource revision, server-side incremented sequence, monotonic.
    uint64 revision = 1;

    // Specification group, describing resource deploy rules for a part
    // of pod_set filtered by a set of labels.
    message DeployGroup {
        // Short label to describe the deploy group.
        string mark = 1;

        // Conjunction of labels required for this deploy group to be applied.
        // Note, that if one pod matches more than one deploy groups, neither
        // one will be applied, since such configuration appears to be ambigous
        // and invalid.
        // Empty map matches every single pod in pod_set.
        NYT.NYTree.NProto.TAttributeDictionary required_labels = 2;

        // Urls where to download the resource from
        // supported protocols: http, https, rbtorrent, raw
        // (for raw resources use "raw:data").
        // Urls are tried in order until successful download.
        repeated string urls = 3;

        // Options how to handle resource inside the box.
        TPodDynamicResourceSpec.TStorageOptions storage_options = 4;
    }

    repeated DeployGroup deploy_groups = 6;
    
    // Size of the update window in pods.
    uint32 update_window = 4;
}

message TDynamicResourceStatus
{
    message TRevisionStatus
    {
        // Revision id
        uint64 revision = 1;
        // Short label describing deploy group.
        string mark = 5;
        // Amount of pods where this revision is active.
        TAggregatedCondition ready = 2;
        // Amount of pods where this revision is currently updating.
        TAggregatedCondition in_progress = 3;
        // Amount of pods where resource update failed on installing this revision.
        TAggregatedCondition error = 4;
    }
    repeated TRevisionStatus revisions = 1;
}

////////////////////////////////////////////////////////////////////////////////
